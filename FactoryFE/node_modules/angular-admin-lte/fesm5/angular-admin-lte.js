import { Title } from '@angular/platform-browser';
import { distinctUntilChanged, pluck } from 'rxjs/operators';
import { NavigationEnd, PRIMARY_OUTLET, Router, RouterModule, NavigationStart } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { __spread } from 'tslib';
import { NgControl, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Injectable, Component, Input, ChangeDetectorRef, NgModule, ChangeDetectionStrategy, ViewChild, ElementRef, ContentChild, NgZone, Renderer2, Directive, Output, EventEmitter, ViewChildren, InjectionToken, Optional, SkipSelf, ContentChildren, ViewContainerRef, HostListener } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var RoutingService = /** @class */ (function () {
    /**
     * @method constructor
     * @param router [description]
     */
    function RoutingService(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    /**
     * [createUrl description]
     * @method createUrl
     * @param route [description]
     * @return [description]
     */
    /**
     * [createUrl description]
     * \@method createUrl
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    RoutingService.createUrl = /**
     * [createUrl description]
     * \@method createUrl
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    function (route) {
        /** @type {?} */
        var url = route.url.map((/**
         * @param {?} urlSegment
         * @return {?}
         */
        function (urlSegment) { return urlSegment.toString(); })).join('/');
        return url;
    };
    /**
     * [isChildrenSelfRoute description]
     * @method isChildrenSelfRoute
     * @param route [description]
     * @return [description]
     */
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    RoutingService.isChildrenSelfRoute = /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    function (route) {
        route.routeConfig.children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        }));
        return false;
    };
    /**
     * [createBreadcrumb description]
     * @method createBreadcrumb
     * @param route [description]
     * @param url   [description]
     * @return [description]
     */
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @private
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    RoutingService.createBreadcrumb = /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @private
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    function (route, url) {
        /** @type {?} */
        var isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    };
    /**
     * [init description]
     * @method init
     */
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?}
     */
    RoutingService.prototype.init = /**
     * [init description]
     * \@method init
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.router.events.subscribe((/**
         * @param {?} routeEvent
         * @return {?}
         */
        function (routeEvent) {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                _this.events.next(routeEvent);
                /** @type {?} */
                var route = _this.router.routerState.root.snapshot;
                /** @type {?} */
                var tmpUrl = '';
                /** @type {?} */
                var url = '';
                /** @type {?} */
                var rootRoot = true;
                /** @type {?} */
                var paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = "/" + RoutingService.createUrl(route);
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (var key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(":" + key, route.params[key]);
                                route.data['title'] = route.data['title'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(":" + key, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(":" + key, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService.createBreadcrumb(route, url));
                    }
                }
                _this.onChange.next(paths);
            }
        }));
    };
    RoutingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RoutingService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return RoutingService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BreadcrumbsComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param routingService [description]
     * @param changeDetectorRef [description]
     */
    function BreadcrumbsComponent(routingService, changeDetectorRef) {
        this.routingService = routingService;
        this.changeDetectorRef = changeDetectorRef;
        this.homeIcon = 'fa fa-home';
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.routingService.onChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.breadcrumbs = value;
        }));
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    BreadcrumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-breadcrumbs',
                    template: "<ol class=\"breadcrumb\">\n  <li *ngFor=\"let breadcrumb of breadcrumbs; let first = first; let last = last\" [class.active]=\"last || !breadcrumb.url\">\n    <a *ngIf=\"breadcrumb.url\" [routerLink]=\"breadcrumb.url\">\n      <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n      <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n      <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n    </a>\n    <ng-template [ngIf]=\"!breadcrumb.url\">\n      <i *ngIf=\"first\" ngClass=\"{{homeIcon}}\"></i>\n      <ng-template [ngIf]=\"breadcrumb.data.breadcrumbs\">{{breadcrumb.data.breadcrumbs}}</ng-template>\n      <ng-template [ngIf]=\"!breadcrumb.data.breadcrumbs\">{{breadcrumb.data.title}}</ng-template>\n    </ng-template>\n  </li>\n</ol>\n",
                    styles: [".breadcrumb{float:right;background:0 0;margin-top:0;margin-bottom:0;font-size:12px;padding:7px 5px;position:absolute;top:15px;right:10px;border-radius:2px}.breadcrumb>li>a{color:#444;text-decoration:none;display:inline-block}.breadcrumb>li>a>.fa,.breadcrumb>li>a>.glyphicon,.breadcrumb>li>a>.ion{margin-right:5px}"]
                }] }
    ];
    /** @nocollapse */
    BreadcrumbsComponent.ctorParameters = function () { return [
        { type: RoutingService },
        { type: ChangeDetectorRef }
    ]; };
    BreadcrumbsComponent.propDecorators = {
        homeIcon: [{ type: Input }]
    };
    return BreadcrumbsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BreadcrumbsModule = /** @class */ (function () {
    function BreadcrumbsModule() {
    }
    BreadcrumbsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule],
                    exports: [BreadcrumbsComponent],
                    declarations: [BreadcrumbsComponent]
                },] }
    ];
    return BreadcrumbsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var  /*
 *
 */
LayoutStore = /** @class */ (function () {
    /**
     * @method constructor
     * @param layoutConfig [description]
     */
    function LayoutStore(layoutConfig) {
        this.initialLayoutState = {
            isSidebarLeftCollapsed: false,
            isSidebarLeftExpandOnOver: false,
            isSidebarLeftMouseOver: false,
            isSidebarLeftMini: true,
            sidebarRightSkin: 'dark',
            isSidebarRightCollapsed: true,
            isSidebarRightOverContent: true,
            layout: 'normal',
            sidebarLeftMenu: [],
            sidebarLeftMenuActiveUrl: '',
            skin: 'blue'
        };
        if (layoutConfig) {
            this.initialLayoutState = Object.assign(this.initialLayoutState, layoutConfig);
        }
        this._layoutState = new BehaviorSubject(this.initialLayoutState);
        this.layoutState = this._layoutState.asObservable();
    }
    Object.defineProperty(LayoutStore.prototype, "windowInnerHeight", {
        /**
         * [windowInnerHeight description]
         * @method windowInnerHeight
         * @return [description]
         */
        get: /**
         * [windowInnerHeight description]
         * \@method windowInnerHeight
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('windowInnerHeight'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "windowInnerWidth", {
        /**
         * [windowInnerWidth description]
         * @method windowInnerWidth
         * @return [description]
         */
        get: /**
         * [windowInnerWidth description]
         * \@method windowInnerWidth
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('windowInnerWidth'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftCollapsed", {
        /**
         * [isSidebarLeftCollapsed description]
         * @return [description]
         */
        get: /**
         * [isSidebarLeftCollapsed description]
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftCollapsed'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftExpandOnOver", {
        /**
         * [isSidebarLeftExpandOnOver description]
         * @method isSidebarLeftExpandOnOver
         * @return [description]
         */
        get: /**
         * [isSidebarLeftExpandOnOver description]
         * \@method isSidebarLeftExpandOnOver
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftExpandOnOver'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMouseOver", {
        /**
         * [isSidebarLeftMouseOver description]
         * @method isSidebarLeftMouseOver
         * @return [description]
         */
        get: /**
         * [isSidebarLeftMouseOver description]
         * \@method isSidebarLeftMouseOver
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftMouseOver'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarLeftMini", {
        /**
         * [isSidebarLeftMini description]
         * @method isSidebarLeftMini
         * @return [description]
         */
        get: /**
         * [isSidebarLeftMini description]
         * \@method isSidebarLeftMini
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarLeftMini'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarRightSkin", {
        /**
         * [sidebarRightSkin description]
         * @method sidebarRightSkin
         * @return [description]
         */
        get: /**
         * [sidebarRightSkin description]
         * \@method sidebarRightSkin
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarRightSkin'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightCollapsed", {
        /**
         * [isSidebarRightCollapsed description]
         * @return [description]
         */
        get: /**
         * [isSidebarRightCollapsed description]
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarRightCollapsed'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "isSidebarRightOverContent", {
        /**
         * [isSidebarRightOverContent description]
         * @method isSidebarRightOverContent
         * @return [description]
         */
        get: /**
         * [isSidebarRightOverContent description]
         * \@method isSidebarRightOverContent
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('isSidebarRightOverContent'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftMenu", {
        /**
         * [sidebarLeftMenu description]
         * @method sidebarLeftMenu
         * @return [description]
         */
        get: /**
         * [sidebarLeftMenu description]
         * \@method sidebarLeftMenu
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftMenu'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftMenuActiveUrl", {
        /**
         * [sidebarLeftMenuActiveUrl description]
         * @method sidebarLeftMenuActiveUrl
         * @return [description]
         */
        get: /**
         * [sidebarLeftMenuActiveUrl description]
         * \@method sidebarLeftMenuActiveUrl
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftMenuActiveUrl'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "sidebarLeftElementHeight", {
        /**
         * [sidebarLeftElementHeight description]
         * @method sidebarLeftElementHeight
         * @return [description]
         */
        get: /**
         * [sidebarLeftElementHeight description]
         * \@method sidebarLeftElementHeight
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('sidebarLeftElementHeight'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "layout", {
        /**
         * [layoutType description]
         * @method layoutType
         * @return [description]
         */
        get: /**
         * [layoutType description]
         * \@method layoutType
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('layout'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "skin", {
        /**
         * [skin description]
         * @method skin
         * @return [description]
         */
        get: /**
         * [skin description]
         * \@method skin
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('skin'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutStore.prototype, "wrapperClasses", {
        /**
         * [wrapperClasses description]
         * @method wrapperClasses
         * @return [description]
         */
        get: /**
         * [wrapperClasses description]
         * \@method wrapperClasses
         * @return {?} [description]
         */
        function () {
            return (/** @type {?} */ (this.layoutState.pipe(pluck('wrapperClasses'), distinctUntilChanged())));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [sidebarLeftCollapsed description]
     * @method sidebarLeftCollapsed
     * @param value [description]
     */
    /**
     * [sidebarLeftCollapsed description]
     * \@method sidebarLeftCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftCollapsed = /**
     * [sidebarLeftCollapsed description]
     * \@method sidebarLeftCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftCollapsed: value }));
    };
    /**
     * [sidebarLeftExpandOnOver description]
     * @method sidebarLeftExpandOnOver
     * @param value [description]
     */
    /**
     * [sidebarLeftExpandOnOver description]
     * \@method sidebarLeftExpandOnOver
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftExpandOnOver = /**
     * [sidebarLeftExpandOnOver description]
     * \@method sidebarLeftExpandOnOver
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftExpandOnOver: value }));
    };
    /**
     * [setSidebarLeftElementHeight description]
     * @method setSidebarLeftElementHeight
     * @param value [description]
     */
    /**
     * [setSidebarLeftElementHeight description]
     * \@method setSidebarLeftElementHeight
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setSidebarLeftElementHeight = /**
     * [setSidebarLeftElementHeight description]
     * \@method setSidebarLeftElementHeight
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftElementHeight: value }));
    };
    /**
     * [setSidebarRightSkin description]
     * @method setSidebarRightSkin
     * @param value [description]
     */
    /**
     * [setSidebarRightSkin description]
     * \@method setSidebarRightSkin
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setSidebarRightSkin = /**
     * [setSidebarRightSkin description]
     * \@method setSidebarRightSkin
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarRightSkin: value }));
    };
    /**
     * [sidebarLeftMouseOver description]
     * @method sidebarLeftMouseOver
     * @param value [description]
     */
    /**
     * [sidebarLeftMouseOver description]
     * \@method sidebarLeftMouseOver
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftMouseOver = /**
     * [sidebarLeftMouseOver description]
     * \@method sidebarLeftMouseOver
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMouseOver: value }));
    };
    /**
     * [sidebarLeftMini description]
     * @method sidebarLeftMini
     * @param value [description]
     */
    /**
     * [sidebarLeftMini description]
     * \@method sidebarLeftMini
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarLeftMini = /**
     * [sidebarLeftMini description]
     * \@method sidebarLeftMini
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarLeftMini: value }));
    };
    /**
     * [sidebarRightCollapsed description]
     * @method sidebarRightCollapsed
     * @param value [description]
     */
    /**
     * [sidebarRightCollapsed description]
     * \@method sidebarRightCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarRightCollapsed = /**
     * [sidebarRightCollapsed description]
     * \@method sidebarRightCollapsed
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightCollapsed: value }));
    };
    /**
     * [sidebarRightOverContent description]
     * @method sidebarRightOverContent
     * @param value [description]
     */
    /**
     * [sidebarRightOverContent description]
     * \@method sidebarRightOverContent
     * @param {?=} value [description]
     * @return {?}
     */
    LayoutStore.prototype.sidebarRightOverContent = /**
     * [sidebarRightOverContent description]
     * \@method sidebarRightOverContent
     * @param {?=} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { isSidebarRightOverContent: value }));
    };
    /**
     * [setSidebarLeftMenu description]
     * @method setSidebarLeftMenu
     * @param value [description]
     */
    /**
     * [setSidebarLeftMenu description]
     * \@method setSidebarLeftMenu
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setSidebarLeftMenu = /**
     * [setSidebarLeftMenu description]
     * \@method setSidebarLeftMenu
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftMenu: value }));
    };
    /**
     * [setSidebarLeftMenuActiveUrl description]
     * @method setSidebarLeftMenuActiveUrl
     * @param value [description]
     */
    /**
     * [setSidebarLeftMenuActiveUrl description]
     * \@method setSidebarLeftMenuActiveUrl
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setSidebarLeftMenuActiveUrl = /**
     * [setSidebarLeftMenuActiveUrl description]
     * \@method setSidebarLeftMenuActiveUrl
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { sidebarLeftMenuActiveUrl: value }));
    };
    /**
     * [setLayout description]
     * @method setLayout
     * @param value [description]
     */
    /**
     * [setLayout description]
     * \@method setLayout
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setLayout = /**
     * [setLayout description]
     * \@method setLayout
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { layout: value }));
    };
    /**
     * [setSkin description]
     * @method setSkin
     * @param value [description]
     */
    /**
     * [setSkin description]
     * \@method setSkin
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setSkin = /**
     * [setSkin description]
     * \@method setSkin
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { skin: value }));
    };
    /**
     * [setWrapperClasses description]
     * @method setWrapperClasses
     * @param value [description]
     */
    /**
     * [setWrapperClasses description]
     * \@method setWrapperClasses
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setWrapperClasses = /**
     * [setWrapperClasses description]
     * \@method setWrapperClasses
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { wrapperClasses: value }));
    };
    /**
     * [setWindowInnerHeight description]
     * @method setWindowInnerHeight
     * @param value [description]
     */
    /**
     * [setWindowInnerHeight description]
     * \@method setWindowInnerHeight
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setWindowInnerHeight = /**
     * [setWindowInnerHeight description]
     * \@method setWindowInnerHeight
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerHeight: value }));
    };
    /**
     * [setWindowInnerWidth description]
     * @method setWindowInnerWidth
     * @param value [description]
     */
    /**
     * [setWindowInnerWidth description]
     * \@method setWindowInnerWidth
     * @param {?} value [description]
     * @return {?}
     */
    LayoutStore.prototype.setWindowInnerWidth = /**
     * [setWindowInnerWidth description]
     * \@method setWindowInnerWidth
     * @param {?} value [description]
     * @return {?}
     */
    function (value) {
        this._layoutState.next(Object.assign(this._layoutState.value, { windowInnerWidth: value }));
    };
    return LayoutStore;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarRightService = /** @class */ (function () {
    function SidebarRightService() {
    }
    Object.defineProperty(SidebarRightService.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * @method scrollHeight
         * @return [description]
         */
        get: /**
         * [scrollHeight description]
         * \@method scrollHeight
         * @return {?} [description]
         */
        function () {
            return this.elementRef ? this.elementRef.nativeElement.scrollHeight : null;
        },
        enumerable: true,
        configurable: true
    });
    SidebarRightService.decorators = [
        { type: Injectable }
    ];
    return SidebarRightService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HeaderService = /** @class */ (function () {
    function HeaderService() {
    }
    Object.defineProperty(HeaderService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * @method offsetHeight
         * @return [description]
         */
        get: /**
         * [offsetHeight description]
         * \@method offsetHeight
         * @return {?} [description]
         */
        function () {
            return this.elementRef.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    HeaderService.decorators = [
        { type: Injectable }
    ];
    return HeaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FooterService = /** @class */ (function () {
    function FooterService() {
    }
    Object.defineProperty(FooterService.prototype, "offsetHeight", {
        /**
         * [offsetHeight description]
         * @method offsetHeight
         * @return [description]
         */
        get: /**
         * [offsetHeight description]
         * \@method offsetHeight
         * @return {?} [description]
         */
        function () {
            return this.elementRef.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    FooterService.decorators = [
        { type: Injectable }
    ];
    return FooterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * [throttle description]
 * \@method throttle
 * @param {?} callback [description]
 * @param {?} delay    [description]
 * @return {?} [description]
 */
function throttle(callback, delay) {
    var _this = this;
    /** @type {?} */
    var timeout = null;
    return (/**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!timeout) {
            timeout = setTimeout((/**
             * @return {?}
             */
            function () {
                callback.call.apply(callback, __spread([_this], args));
                timeout = null;
            }), delay);
        }
    });
}
/**
 * [removeSubscriptions description]
 * \@method removeSubscriptions
 * @param {?} subscriptions
 * @return {?}
 */
function removeSubscriptions(subscriptions) {
    if (subscriptions) {
        subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
    }
    return [];
}
/**
 * [removeListeners description]
 * \@method removeListeners
 * @param {?} listeners
 * @return {?}
 */
function removeListeners(listeners) {
    if (listeners) {
        listeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        function (listener) {
            listener();
        }));
    }
    return [];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContentComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param layoutStore
     * @param routingService
     * @param titleService
     * @param elementRef
     * @param changeDetectorRef
     * @param sidebarRightService
     * @param headerService
     * @param footerService
     * @param router
     */
    function ContentComponent(layoutStore, routingService, titleService, elementRef, changeDetectorRef, sidebarRightService, headerService, footerService, router) {
        this.layoutStore = layoutStore;
        this.routingService = routingService;
        this.titleService = titleService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.sidebarRightService = sidebarRightService;
        this.headerService = headerService;
        this.footerService = footerService;
        this.router = router;
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ContentComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.titleTag = this.titleService.getTitle();
        this.subscriptions.push(this.routingService.onChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value[value.length - 1]) {
                _this.titleService.setTitle(_this.getTitle(value[value.length - 1].data['title']));
                _this.header = value[value.length - 1].data['title'];
                _this.description = value[value.length - 1].data['description'];
            }
            _this.changeDetectorRef.markForCheck();
        })));
        this.subscriptions.push(this.router.events.subscribe((/**
         * @param {?} routeEvent
         * @return {?}
         */
        function (routeEvent) {
            if (routeEvent instanceof NavigationStart) {
                _this.navigationEnd = false;
            }
            if (routeEvent instanceof NavigationEnd) {
                _this.navigationEnd = true;
                _this.setContentMinHeight();
            }
        })));
        this.subscriptions.push(this.layoutStore.sidebarLeftElementHeight.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.sidebarLeftHeight = value;
            _this.setContentMinHeight();
        })));
        this.subscriptions.push(this.layoutStore.layout.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.layout = value;
            _this.setContentMinHeight();
        })));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.windowInnerHeight = value;
            _this.setContentMinHeight();
        })));
        this.heightStyle = this.windowInnerHeight;
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ContentComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    Object.defineProperty(ContentComponent.prototype, "scrollHeight", {
        /**
         * [scrollHeight description]
         * @method scrollHeight
         * @return [description]
         */
        get: /**
         * [scrollHeight description]
         * \@method scrollHeight
         * @return {?} [description]
         */
        function () {
            return this.contentInnerElement.nativeElement.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [getTitle description]
     * @method getTitle
     * @param title [description]
     * @return [description]
     */
    /**
     * [getTitle description]
     * \@method getTitle
     * @private
     * @param {?} title [description]
     * @return {?} [description]
     */
    ContentComponent.prototype.getTitle = /**
     * [getTitle description]
     * \@method getTitle
     * @private
     * @param {?} title [description]
     * @return {?} [description]
     */
    function (title) {
        return title ? title + " - " + this.titleTag : this.titleTag;
    };
    /**
     * [setMinHeight description]
     * @method setMinHeight
     */
    /**
     * [setMinHeight description]
     * \@method setMinHeight
     * @private
     * @return {?}
     */
    ContentComponent.prototype.setContentMinHeight = /**
     * [setMinHeight description]
     * \@method setMinHeight
     * @private
     * @return {?}
     */
    function () {
        if (this.navigationEnd) {
            /** @type {?} */
            var heightStyle = void 0;
            /** @type {?} */
            var headerFooterOffsetHeight = this.headerService.offsetHeight + this.footerService.offsetHeight;
            if (this.layout === 'fixed') {
                heightStyle = this.windowInnerHeight - this.footerService.offsetHeight;
            }
            else {
                /** @type {?} */
                var sidebarRight = this.sidebarRightService.scrollHeight ?
                    this.sidebarRightService.scrollHeight - this.headerService.offsetHeight : 0;
                heightStyle = Math.max(this.windowInnerHeight - headerFooterOffsetHeight, this.sidebarLeftHeight - this.headerService.offsetHeight, sidebarRight);
            }
            if (heightStyle && heightStyle !== this.heightStyle) {
                if (this.scrollHeight > heightStyle) {
                    heightStyle = null;
                }
                this.heightStyle = heightStyle;
                this.changeDetectorRef.detectChanges();
            }
        }
    };
    ContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-content',
                    template: "<div class=\"content-wrapper\" [style.min-height.px]=\"heightStyle\">\n  <div #contentInnerElement class=\"content-inner\">\n    <ng-content select=\"[mk-layout-content-before-header]\"></ng-content>\n    <section *ngIf=\"header || description\" class=\"content-header\">\n      <h1>\n        {{header}}\n        <small *ngIf=\"description\">{{description}}</small>\n      </h1>\n      <mk-breadcrumbs></mk-breadcrumbs>\n    </section>\n    <ng-content select=\"[mk-layout-content-after-header]\"></ng-content>\n    <section class=\"content\">\n      <ng-content></ng-content>\n    </section>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.content-wrapper{position:relative}"]
                }] }
    ];
    /** @nocollapse */
    ContentComponent.ctorParameters = function () { return [
        { type: LayoutStore },
        { type: RoutingService },
        { type: Title },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: SidebarRightService },
        { type: HeaderService },
        { type: FooterService },
        { type: Router }
    ]; };
    ContentComponent.propDecorators = {
        contentInnerElement: [{ type: ViewChild, args: ['contentInnerElement',] }]
    };
    return ContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContentModule = /** @class */ (function () {
    function ContentModule() {
    }
    ContentModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule, BreadcrumbsModule],
                    exports: [ContentComponent],
                    declarations: [ContentComponent]
                },] }
    ];
    return ContentModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Footer Left
 */
var FooterLeftComponent = /** @class */ (function () {
    function FooterLeftComponent() {
    }
    FooterLeftComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-footer-left',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    FooterLeftComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return FooterLeftComponent;
}());
/**
 * Footer Right
 */
var FooterRightComponent = /** @class */ (function () {
    function FooterRightComponent() {
    }
    FooterRightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-footer-right',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    FooterRightComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return FooterRightComponent;
}());
var FooterComponent = /** @class */ (function () {
    function FooterComponent(elementRef, footerService) {
        this.elementRef = elementRef;
        this.footerService = footerService;
    }
    /**
     * @return {?}
     */
    FooterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.footerService.elementRef = this.elementRef;
    };
    FooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-footer',
                    template: "<footer class=\"main-footer\">\n  <div class=\"pull-right hidden-xs\">\n    <ng-template [ngTemplateOutlet]=\"footerRightComponent?.templateRef\"></ng-template>\n  </div>\n  <ng-template [ngTemplateOutlet]=\"footerLeftComponent?.templateRef\"></ng-template>\n</footer>\n",
                    styles: [":host{display:block}"]
                }] }
    ];
    /** @nocollapse */
    FooterComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FooterService }
    ]; };
    FooterComponent.propDecorators = {
        footerLeftComponent: [{ type: ContentChild, args: [FooterLeftComponent,] }],
        footerRightComponent: [{ type: ContentChild, args: [FooterRightComponent,] }]
    };
    return FooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FooterModule = /** @class */ (function () {
    function FooterModule() {
    }
    FooterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [FooterComponent, FooterLeftComponent, FooterRightComponent],
                    declarations: [FooterComponent, FooterLeftComponent, FooterRightComponent]
                },] }
    ];
    return FooterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Header Logo
 */
var HeaderLogoComponent = /** @class */ (function () {
    function HeaderLogoComponent() {
    }
    HeaderLogoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-header-logo',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    HeaderLogoComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return HeaderLogoComponent;
}());
/**
 * Header Logo Mini
 */
var HeaderLogoMiniComponent = /** @class */ (function () {
    function HeaderLogoMiniComponent() {
    }
    HeaderLogoMiniComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-header-logo-mini',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    HeaderLogoMiniComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return HeaderLogoMiniComponent;
}());
/**
 * Header
 */
var HeaderComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param layoutStore [description]
     * @param ngZone      [description]
     * @param renderer2   [description]
     * @param elementRef   [description]
     * @param headerService   [description]
     */
    function HeaderComponent(layoutStore, ngZone, renderer2, elementRef, headerService) {
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        this.headerService = headerService;
        this.listeners = [];
        this.subscriptions = [];
        this.isSidebarLeftToggle = true;
        this.isSidebarRightToggle = true;
        this.logoLink = '/';
    }
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    HeaderComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.headerService.elementRef = this.headerElement;
        if (this.sidebarLeftToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.isSidebarLeftCollapsed = value;
            })));
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarLeftToggleElement.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarLeftCollapsed(!_this.isSidebarLeftCollapsed);
                })));
            }));
        }
        if (this.sidebarRightToggleElement) {
            this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.isSidebarRightCollapsed = value;
            })));
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.listeners.push(_this.renderer2.listen(_this.sidebarRightToggleElement.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    event.preventDefault();
                    _this.layoutStore.sidebarRightCollapsed(!_this.isSidebarRightCollapsed);
                })));
            }));
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    HeaderComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    HeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-header',
                    template: "<header #headerElement class=\"main-header\">\n  <a [routerLink]=\"logoLink\" class=\"logo\">\n    <span class=\"logo-mini\"><ng-template [ngTemplateOutlet]=\"headerLogoMiniComponent?.templateRef\"></ng-template></span>\n    <span class=\"logo-lg\"><ng-template [ngTemplateOutlet]=\"headerLogoComponent?.templateRef\"></ng-template></span>\n  </a>\n  <nav class=\"navbar navbar-static-top\">\n    <a *ngIf=\"isSidebarLeftToggle\" #sidebarLeftToggleElement href=\"#\" class=\"sidebar-toggle\">\n      <span class=\"sr-only\">Toggle navigation</span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n      <span class=\"icon-bar\"></span>\n    </a>\n    <div *ngIf=\"isSidebarRightToggle\" class=\"sidebar-right-toggle\">\n      <a #sidebarRightToggleElement href=\"#\"><i class=\"fa fa-gears\"></i></a>\n    </div>\n    <ng-content></ng-content>\n  </nav>\n</header>\n",
                    styles: [":host{display:block}.sidebar-right-toggle{float:right}.sidebar-right-toggle a{padding:15px;display:block;line-height:20px;cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    HeaderComponent.ctorParameters = function () { return [
        { type: LayoutStore },
        { type: NgZone },
        { type: Renderer2 },
        { type: ElementRef },
        { type: HeaderService }
    ]; };
    HeaderComponent.propDecorators = {
        isSidebarLeftToggle: [{ type: Input }],
        isSidebarRightToggle: [{ type: Input }],
        logoLink: [{ type: Input }],
        headerLogoComponent: [{ type: ContentChild, args: [HeaderLogoComponent,] }],
        headerLogoMiniComponent: [{ type: ContentChild, args: [HeaderLogoMiniComponent,] }],
        headerElement: [{ type: ViewChild, args: ['headerElement',] }],
        sidebarLeftToggleElement: [{ type: ViewChild, args: ['sidebarLeftToggleElement',] }],
        sidebarRightToggleElement: [{ type: ViewChild, args: ['sidebarRightToggleElement',] }]
    };
    return HeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HeaderModule = /** @class */ (function () {
    function HeaderModule() {
    }
    HeaderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule],
                    exports: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent],
                    declarations: [HeaderComponent, HeaderLogoComponent, HeaderLogoMiniComponent]
                },] }
    ];
    return HeaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var CollapseAnimationDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     * @param ngZone     [description]
     * @param renderer2  [description]
     */
    function CollapseAnimationDirective(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        this.startEventEmitter = new EventEmitter();
        this.doneEventEmitter = new EventEmitter();
    }
    Object.defineProperty(CollapseAnimationDirective.prototype, "_isCollapsed", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.lastIsCollapsed = this.isCollapsed;
            this.isCollapsed = value;
            if (!this.firstStart) {
                this.emit('start');
                if (value) {
                    this.collapse();
                }
                else if (value === false) {
                    this.unCollapse();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', this.collapseAnimationDuration + "ms");
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    };
    /**
     * @method ngAfterContentInit
     */
    /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    CollapseAnimationDirective.prototype.ngAfterContentInit = /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    function () {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    };
    /**
     * [ngOnDestroy description]
     * @method ngOnDestroy
     * @return [description]
     */
    /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    CollapseAnimationDirective.prototype.ngOnDestroy = /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    function () {
        if (this.listener) {
            this.listener();
        }
    };
    /**
     * [subscriptions description]
     * @method subscriptions
     */
    /**
     * [subscriptions description]
     * \@method subscriptions
     * @private
     * @return {?}
     */
    CollapseAnimationDirective.prototype.subscriptions = /**
     * [subscriptions description]
     * \@method subscriptions
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.listener = _this.renderer2.listen(_this.elementRef.nativeElement, 'transitionend', (/**
             * @return {?}
             */
            function () {
                if (!_this.isCollapsed) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'un-collapse');
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    _this.renderer2.setStyle(_this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame((/**
                 * @return {?}
                 */
                function () {
                    _this.renderer2.removeStyle(_this.elementRef.nativeElement, 'height');
                    _this.emit('done');
                    _this.transitioning = false;
                }));
            }));
        }));
    };
    /**
     * [unCollapse description]
     * @method unCollapse
     */
    /**
     * [unCollapse description]
     * \@method unCollapse
     * @private
     * @return {?}
     */
    CollapseAnimationDirective.prototype.unCollapse = /**
     * [unCollapse description]
     * \@method unCollapse
     * @private
     * @return {?}
     */
    function () {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', this.elementRef.nativeElement.scrollHeight + "px");
    };
    /**
     * [collapse description]
     * @method collapse
     */
    /**
     * [collapse description]
     * \@method collapse
     * @private
     * @return {?}
     */
    CollapseAnimationDirective.prototype.collapse = /**
     * [collapse description]
     * \@method collapse
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame((/**
         * @return {?}
         */
        function () {
            if (!_this.transitioning) {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', _this.elementRef.nativeElement.offsetHeight + "px");
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'collapsing');
            }
            _this.transitioning = true;
            requestAnimationFrame((/**
             * @return {?}
             */
            function () {
                _this.renderer2.setStyle(_this.elementRef.nativeElement, 'height', "0px");
            }));
        }));
    };
    /**
     * @private
     * @param {?} phaseName
     * @return {?}
     */
    CollapseAnimationDirective.prototype.emit = /**
     * @private
     * @param {?} phaseName
     * @return {?}
     */
    function (phaseName) {
        /** @type {?} */
        var event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'mkCollapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    };
    CollapseAnimationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkCollapseAnimation]'
                },] }
    ];
    /** @nocollapse */
    CollapseAnimationDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    CollapseAnimationDirective.propDecorators = {
        collapseAnimationDuration: [{ type: Input }],
        collapseAnimationTiming: [{ type: Input }],
        _isCollapsed: [{ type: Input, args: ['mkCollapseAnimation',] }],
        startEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.start',] }],
        doneEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.done',] }]
    };
    return CollapseAnimationDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnimationsModule = /** @class */ (function () {
    function AnimationsModule() {
    }
    AnimationsModule.decorators = [
        { type: NgModule, args: [{
                    exports: [CollapseAnimationDirective],
                    declarations: [CollapseAnimationDirective]
                },] }
    ];
    return AnimationsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var SidebarLeftToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function SidebarLeftToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    SidebarLeftToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkMenuToggle]'
                },] }
    ];
    /** @nocollapse */
    SidebarLeftToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SidebarLeftToggleDirective.propDecorators = {
        item: [{ type: Input, args: ['mkMenuToggle',] }]
    };
    return SidebarLeftToggleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WrapperService = /** @class */ (function () {
    function WrapperService() {
    }
    WrapperService.decorators = [
        { type: Injectable }
    ];
    return WrapperService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarLeftComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param  changeDetectorRef  [description]
     * @param  layoutStore        [description]
     * @param  ngZone             [description]
     * @param  renderer2          [description]
     * @param  router             [description]
     * @param  routingService     [description]
     * @param  wrapperService     [description]
     * @param  headerService      [description]
     */
    function SidebarLeftComponent(changeDetectorRef, layoutStore, ngZone, renderer2, router, routingService, wrapperService, headerService) {
        this.changeDetectorRef = changeDetectorRef;
        this.layoutStore = layoutStore;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.router = router;
        this.routingService = routingService;
        this.wrapperService = wrapperService;
        this.headerService = headerService;
        this.collapsedItems = [];
        this.activatedItems = [];
        this.toggleListeners = [];
        this.listeners = [];
        this.itemsByIds = {};
        this.runningAnimations = 0;
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.menu = value;
            _this.monkeyPatchMenu(_this.menu);
            if (_this.initialized) {
                _this.setMenuListeners(_this.activeUrl);
                _this.setSidebarListeners();
                _this.setMenuTogglesListeners();
            }
            _this.initialized = true;
        })));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenuActiveUrl.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.activeUrl = value;
            _this.setMenuListeners(value);
        })));
        this.subscriptions.push(this.routingService.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof NavigationEnd) {
                _this.activeUrl = event.url;
                _this.setMenuListeners(event.url);
            }
        })));
        this.setSidebarListeners();
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        this.setMenuTogglesListeners();
        this.checkMenuWithoutChildren();
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    SidebarLeftComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
        this.toggleListeners = removeListeners(this.toggleListeners);
    };
    /**
     * [setSidebarListeners description]
     * @method setSidebarListeners
     */
    /**
     * [setSidebarListeners description]
     * \@method setSidebarListeners
     * @return {?}
     */
    SidebarLeftComponent.prototype.setSidebarListeners = /**
     * [setSidebarListeners description]
     * \@method setSidebarListeners
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.layoutStore.layout.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.layout = value;
            _this.setSidebarHeight();
        })));
        this.subscriptions.push(this.layoutStore.windowInnerHeight.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.windowInnerHeight = value;
            _this.setSidebarHeight();
        })));
        this.subscriptions.push(this.layoutStore.sidebarLeftMenu.subscribe((/**
         * @return {?}
         */
        function () {
            _this.changeDetectorRef.detectChanges();
        })));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseenter', (/**
             * @return {?}
             */
            function () {
                _this.layoutStore.sidebarLeftMouseOver(true);
            })));
            _this.listeners.push(_this.renderer2.listen(_this.sidebarElement.nativeElement, 'mouseleave', (/**
             * @return {?}
             */
            function () {
                _this.layoutStore.sidebarLeftMouseOver(false);
            })));
        }));
        this.subscriptions.push(this.layoutStore.windowInnerWidth.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.windowInnerWidth = value;
            if (!_this.isSidebarLeftCollapsed && _this.windowInnerWidth <= 767) {
                _this.layoutStore.sidebarLeftCollapsed(true);
            }
            else if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed && !_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(false);
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMouseOver.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isSidebarLeftMouseOver = value;
            if (_this.isSidebarLeftExpandOnOver) {
                _this.layoutStore.sidebarLeftCollapsed(!value);
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarLeftExpandOnOver.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isSidebarLeftExpandOnOver = value;
            if (_this.windowInnerWidth > 767 && _this.isSidebarLeftCollapsed !== undefined) {
                _this.layoutStore.sidebarLeftCollapsed(value);
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarLeftCollapsed.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isSidebarLeftCollapsed = value;
            if (_this.windowInnerWidth <= 767) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-open');
                }
            }
            else {
                if (_this.isSidebarLeftExpandOnOver && !_this.isSidebarLeftMouseOver && !value) {
                    _this.layoutStore.sidebarLeftExpandOnOver(false);
                }
                if (value) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
                else {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-collapse');
                    if (_this.isSidebarLeftExpandOnOver) {
                        _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-expanded-on-hover');
                    }
                }
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarLeftMini.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
            else {
                _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'sidebar-mini');
            }
        })));
    };
    /**
     * [setMenuListeners description]
     * @method setMenuListeners
     */
    /**
     * [setMenuListeners description]
     * \@method setMenuListeners
     * @param {?} url
     * @return {?}
     */
    SidebarLeftComponent.prototype.setMenuListeners = /**
     * [setMenuListeners description]
     * \@method setMenuListeners
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url === '/') {
            this.activeItems(url);
            this.changeDetectorRef.detectChanges();
        }
        else {
            /** @type {?} */
            var primaryOutlet = this.router.parseUrl(url).root.children[PRIMARY_OUTLET];
            if (primaryOutlet) {
                this.activeItems(primaryOutlet.toString());
                this.changeDetectorRef.detectChanges();
            }
        }
        if (this.windowInnerWidth <= 767 || this.isSidebarLeftExpandOnOver) {
            this.layoutStore.sidebarLeftCollapsed(true);
        }
    };
    /**
     * [getIconClasses description]
     * @method getIconClasses
     * @param item [description]
     * @return [description]
     */
    /**
     * [getIconClasses description]
     * \@method getIconClasses
     * @param {?} item [description]
     * @return {?} [description]
     */
    SidebarLeftComponent.prototype.getIconClasses = /**
     * [getIconClasses description]
     * \@method getIconClasses
     * @param {?} item [description]
     * @return {?} [description]
     */
    function (item) {
        if (item.iconClasses || item.iconClasses === '') {
            return item.iconClasses;
        }
        else {
            return 'fa fa-circle-o';
        }
    };
    /**
     * [visibilityStateStart description]
     * @method visibilityStateStart
     * @param event [description]
     */
    /**
     * [visibilityStateStart description]
     * \@method visibilityStateStart
     * @param {?} event [description]
     * @return {?}
     */
    SidebarLeftComponent.prototype.visibilityStateStart = /**
     * [visibilityStateStart description]
     * \@method visibilityStateStart
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.runningAnimations++;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.runningAnimations--;
                if (!_this.runningAnimations) {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                }
            }), event.totalTime);
        }));
    };
    /**
     * [uncollapseItemParents description]
     * @method uncollapseItemParents
     * @param item           [description]
     * @param isActive       [description]
     */
    /**
     * [uncollapseItemParents description]
     * \@method uncollapseItemParents
     * @private
     * @param {?} item           [description]
     * @param {?=} isActive       [description]
     * @return {?}
     */
    SidebarLeftComponent.prototype.uncollapseItemParents = /**
     * [uncollapseItemParents description]
     * \@method uncollapseItemParents
     * @private
     * @param {?} item           [description]
     * @param {?=} isActive       [description]
     * @return {?}
     */
    function (item, isActive) {
        if (isActive === void 0) { isActive = false; }
        if (isActive) {
            item.isActive = true;
            this.activatedItems.push(item);
        }
        item.isCollapsed = false;
        this.collapsedItems.push(item);
        if (item.parentId) {
            this.uncollapseItemParents(this.itemsByIds[item.parentId], isActive);
        }
    };
    /**
     * [findItemsByUrl description]
     * @method findItemsByUrl
     * @param url   [description]
     * @param items [description]
     * @param returnItems [description]
     * @return [description]
     */
    /**
     * [findItemsByUrl description]
     * \@method findItemsByUrl
     * @private
     * @param {?} url   [description]
     * @param {?} items [description]
     * @param {?=} returnItems [description]
     * @return {?} [description]
     */
    SidebarLeftComponent.prototype.findItemsByUrl = /**
     * [findItemsByUrl description]
     * \@method findItemsByUrl
     * @private
     * @param {?} url   [description]
     * @param {?} items [description]
     * @param {?=} returnItems [description]
     * @return {?} [description]
     */
    function (url, items, returnItems) {
        var _this = this;
        if (returnItems === void 0) { returnItems = []; }
        items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.route === url) {
                returnItems.push(item);
            }
            else if (item.children) {
                _this.findItemsByUrl(url, item.children, returnItems);
            }
        }));
        return returnItems;
    };
    /**
     * [activeItems description]
     * @method activeItems
     * @param url [description]
     */
    /**
     * [activeItems description]
     * \@method activeItems
     * @private
     * @param {?} url [description]
     * @return {?}
     */
    SidebarLeftComponent.prototype.activeItems = /**
     * [activeItems description]
     * \@method activeItems
     * @private
     * @param {?} url [description]
     * @return {?}
     */
    function (url) {
        var _this = this;
        this.activatedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.isActive = false;
        }));
        this.activatedItems = [];
        this.collapsedItems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.isActive = false;
            item.isCollapsed = true;
        }));
        this.collapsedItems = [];
        /** @type {?} */
        var items = this.findItemsByUrl(url, this.menu);
        items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.isActive = true;
            _this.uncollapseItemParents(item, true);
            _this.activatedItems.push(item);
        }));
    };
    /**
     * [monkeyPatchMenu description]
     * @method monkeyPatchMenu
     * @param items    [description]
     * @param parentId [description]
     */
    /**
     * [monkeyPatchMenu description]
     * \@method monkeyPatchMenu
     * @private
     * @param {?} items    [description]
     * @param {?=} parentId [description]
     * @return {?}
     */
    SidebarLeftComponent.prototype.monkeyPatchMenu = /**
     * [monkeyPatchMenu description]
     * \@method monkeyPatchMenu
     * @private
     * @param {?} items    [description]
     * @param {?=} parentId [description]
     * @return {?}
     */
    function (items, parentId) {
        var _this = this;
        items.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.id = parentId ? Number(parentId + '' + (index + 1)) : index + 1;
            if (parentId) {
                item.parentId = parentId;
            }
            if (!item.disableCollapse) {
                item.isCollapsed = true;
            }
            item.isActive = false;
            if (parentId || item.children) {
                _this.itemsByIds[item.id] = item;
            }
            if (item.children) {
                _this.monkeyPatchMenu(item.children, item.id);
            }
        }));
    };
    /**
     * [setMenuTogglesListeners description]
     * @method setMenuTogglesListeners
     */
    /**
     * [setMenuTogglesListeners description]
     * \@method setMenuTogglesListeners
     * @private
     * @return {?}
     */
    SidebarLeftComponent.prototype.setMenuTogglesListeners = /**
     * [setMenuTogglesListeners description]
     * \@method setMenuTogglesListeners
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.toggleListeners = removeListeners(this.toggleListeners);
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.sidebarLeftToggleDirectives.forEach((/**
             * @param {?} menuToggle
             * @return {?}
             */
            function (menuToggle) {
                _this.toggleListeners.push(_this.renderer2.listen(menuToggle.elementRef.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    event.preventDefault();
                    if (menuToggle.item.isCollapsed) {
                        _this.collapsedItems.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            if (!item.disableCollapse) {
                                item.isCollapsed = true;
                            }
                        }));
                        _this.collapsedItems = [];
                        _this.uncollapseItemParents(menuToggle.item);
                    }
                    else {
                        menuToggle.item.isCollapsed = !menuToggle.item.isCollapsed;
                    }
                    _this.changeDetectorRef.detectChanges();
                })));
            }));
        }));
    };
    /**
     * [checkMenuWithoutChildren description]
     * @method checkMenuWithoutChildren
     */
    /**
     * [checkMenuWithoutChildren description]
     * \@method checkMenuWithoutChildren
     * @private
     * @return {?}
     */
    SidebarLeftComponent.prototype.checkMenuWithoutChildren = /**
     * [checkMenuWithoutChildren description]
     * \@method checkMenuWithoutChildren
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var menuHaveChildren;
        this.menu.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.children) {
                return menuHaveChildren = true;
            }
        }));
        if (!menuHaveChildren) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.layoutStore.setSidebarLeftElementHeight(_this.sidebarElement.nativeElement.offsetHeight);
                }));
            }));
        }
    };
    /**
     * [setSidebarHeight description]
     * @method setSidebarHeight
     */
    /**
     * [setSidebarHeight description]
     * \@method setSidebarHeight
     * @private
     * @return {?}
     */
    SidebarLeftComponent.prototype.setSidebarHeight = /**
     * [setSidebarHeight description]
     * \@method setSidebarHeight
     * @private
     * @return {?}
     */
    function () {
        if (this.layout === 'fixed') {
            /** @type {?} */
            var height = this.windowInnerHeight - this.headerService.offsetHeight;
            if (height && height !== this.sidebarHeight) {
                this.sidebarHeight = height;
                this.sidebarOverflow = 'auto';
                this.changeDetectorRef.detectChanges();
            }
        }
        else if (this.sidebarHeight) {
            this.sidebarOverflow = this.sidebarHeight = null;
            this.changeDetectorRef.detectChanges();
        }
    };
    SidebarLeftComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-sidebar-left',
                    template: "<aside class=\"main-sidebar\">\n  <section class=\"sidebar\" #sidebarElement [style.height.px]=\"sidebarHeight\" [style.overflow]=\"sidebarOverflow\">\n    <ng-content></ng-content>\n  \t<ul class=\"sidebar-menu\">\n      <ng-container *ngFor=\"let item of menu\">\n        <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n      </ng-container>\n  \t</ul>\n  </section>\n</aside>\n\n<ng-template #sidebarInner let-item=\"item\">\n  <li [class.active]=\"item.isActive\" [class.header]=\"item.separator\" [class.menu-open]=\"!item.isCollapsed\">\n    <span *ngIf=\"item.separator\">{{item.label}}</span>\n    <a *ngIf=\"!item.separator && item.route\" [routerLink]=\"item.route\">\n    \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n    \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n    \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n    \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n    \t</span>\n    </a>\n    <a *ngIf=\"!item.separator && !item.route\" href=\"#\" [mkMenuToggle]=\"item\">\n    \t<i [class]=\"getIconClasses(item)\"></i><span>{{item.label}}</span>\n    \t<span *ngIf=\"item.children || item.pullRights\" class=\"pull-right-container\">\n    \t\t<span *ngFor=\"let rightItem of item.pullRights\" class=\"pull-right {{rightItem.classes}}\">{{rightItem.text}}</span>\n    \t  <i *ngIf=\"!item.pullRights\" class=\"fa fa-angle-left pull-right\"></i>\n    \t</span>\n    </a>\n    <ul *ngIf=\"item.children\" [mkCollapseAnimation]=\"item.isCollapsed\" (mkCollapseAnimation.start)=\"visibilityStateStart($event)\" class=\"treeview-menu\">\n      <ng-container *ngFor=\"let item of item.children\">\n        <ng-container *ngTemplateOutlet=\"sidebarInner; context: {item: item}\"></ng-container>\n      </ng-container>\n    </ul>\n  </li>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".treeview-menu.collapse{display:none}.treeview-menu,.treeview-menu.collapse.in{display:block}"]
                }] }
    ];
    /** @nocollapse */
    SidebarLeftComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: LayoutStore },
        { type: NgZone },
        { type: Renderer2 },
        { type: Router },
        { type: RoutingService },
        { type: WrapperService },
        { type: HeaderService }
    ]; };
    SidebarLeftComponent.propDecorators = {
        sidebarElement: [{ type: ViewChild, args: ['sidebarElement',] }],
        sidebarLeftToggleDirectives: [{ type: ViewChildren, args: [SidebarLeftToggleDirective,] }]
    };
    return SidebarLeftComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarLeftModule = /** @class */ (function () {
    function SidebarLeftModule() {
    }
    SidebarLeftModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule, AnimationsModule],
                    exports: [SidebarLeftComponent],
                    declarations: [SidebarLeftToggleDirective, SidebarLeftComponent]
                },] }
    ];
    return SidebarLeftModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarRightComponent = /** @class */ (function () {
    function SidebarRightComponent(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isSidebarRightCollapsed = value;
            if (!value) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'control-sidebar-open');
                if (!_this.isSidebarRightOverContent) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.isSidebarRightOverContent = value;
            if (!_this.isSidebarRightCollapsed) {
                if (value) {
                    _this.renderer2.removeClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    _this.renderer2.addClass(_this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        })));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.skin !== value) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, "control-sidebar-" + _this.skin);
            }
            _this.skin = value;
            _this.renderer2.addClass(_this.elementRef.nativeElement, "control-sidebar-" + value);
        })));
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    SidebarRightComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    SidebarRightComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    };
    SidebarRightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-sidebar-right',
                    template: "<div #sidebarContentElement class=\"control-sidebar-content\">\n  <ng-content></ng-content>\n</div>\n<div class=\"control-sidebar-bg\"></div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block;height:100%}.control-sidebar-bg{z-index:-1}/deep/ .tab-content{padding:10px 15px}"]
                }] }
    ];
    /** @nocollapse */
    SidebarRightComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutStore },
        { type: SidebarRightService },
        { type: WrapperService }
    ]; };
    SidebarRightComponent.propDecorators = {
        sidebarContentElement: [{ type: ViewChild, args: ['sidebarContentElement',] }]
    };
    return SidebarRightComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarRightModule = /** @class */ (function () {
    function SidebarRightModule() {
    }
    SidebarRightModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [SidebarRightComponent],
                    declarations: [SidebarRightComponent]
                },] }
    ];
    return SidebarRightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WrapperComponent = /** @class */ (function () {
    function WrapperComponent(elementRef, renderer2, layoutStore, wrapperService, ngZone) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.wrapperService = wrapperService;
        this.ngZone = ngZone;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * [ngOnInit description]
     * @method ngOnInit
     */
    /**
     * [ngOnInit description]
     * \@method ngOnInit
     * @return {?}
     */
    WrapperComponent.prototype.ngOnInit = /**
     * [ngOnInit description]
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.layoutStore.setWindowInnerHeight(window.innerHeight);
        this.layoutStore.setWindowInnerWidth(window.innerWidth);
        this.wrapperService.wrapperElementRef = this.elementRef;
        this.subscriptions.push(this.layoutStore.wrapperClasses.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.classes = value ? value : null;
        })));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.listeners.push(_this.renderer2.listen('window', 'resize', throttle((/**
             * @return {?}
             */
            function () {
                _this.layoutStore.setWindowInnerHeight(window.innerHeight);
                _this.layoutStore.setWindowInnerWidth(window.innerWidth);
            }), 250)));
        }));
        this.subscriptions.push(this.layoutStore.layout.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value === 'fixed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'fixed') :
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'fixed');
            value === 'boxed' ? _this.renderer2.addClass(_this.elementRef.nativeElement, 'layout-boxed') :
                _this.renderer2.removeClass(_this.elementRef.nativeElement, 'layout-boxed');
        })));
        this.subscriptions.push(this.layoutStore.skin.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (_this.skin && _this.skin !== value) {
                    _this.renderer2.removeClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
                }
                _this.skin = value;
                _this.renderer2.addClass(_this.elementRef.nativeElement, "skin-" + _this.skin);
            }
        })));
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    WrapperComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.subscriptions = removeSubscriptions(this.subscriptions);
        this.listeners = removeListeners(this.listeners);
    };
    WrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-layout-wrapper',
                    template: "<div class=\"wrapper overflow\" [ngClass]=\"classes\">\n  <ng-content></ng-content>\n</div>\n",
                    styles: [".wrapper.overflow{overflow:hidden}:host{display:block}:host /deep/ .sidebar-right-toggle>a{color:#fff}:host.sidebar-mini.sidebar-collapse /deep/ .treeview-menu.collapsing{height:auto!important}:host /deep/ .sidebar-right-toggle>a:hover{background:rgba(0,0,0,.1)}:host.skin-black /deep/ .sidebar-right-toggle>a,:host.skin-black-light /deep/ .sidebar-right-toggle>a{color:#333;border-right-width:0}:host.skin-black /deep/ .sidebar-right-toggle>a:hover,:host.skin-black-light /deep/ .sidebar-right-toggle>a:hover{background-color:#fff;color:#999}:host.skin-black /deep/ .sidebar-right-toggle>a{border-left:1px solid #eee}:host.skin-black-light /deep/ .sidebar-right-toggle>a{border-left:1px solid #d2d6de}"]
                }] }
    ];
    /** @nocollapse */
    WrapperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutStore },
        { type: WrapperService },
        { type: NgZone }
    ]; };
    return WrapperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WrapperModule = /** @class */ (function () {
    function WrapperModule() {
    }
    WrapperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [WrapperComponent],
                    declarations: [WrapperComponent]
                },] }
    ];
    return WrapperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LayoutService = /** @class */ (function () {
    /**
     * @method constructor
     * @param routingService [description]
     */
    function LayoutService(routingService) {
        this.routingService = routingService;
        this.isCustomLayout = new BehaviorSubject(true);
        this.init();
    }
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?} [description]
     */
    LayoutService.prototype.init = /**
     * [init description]
     * \@method init
     * @private
     * @return {?} [description]
     */
    function () {
        var _this = this;
        this.routingService.onChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value[value.length - 1]) {
                if (_this.customLayout === undefined || _this.customLayout !== value[value.length - 1].data['disableLayout']) {
                    _this.isCustomLayout.next(!!value[value.length - 1].data['customLayout']);
                }
                _this.customLayout = value[value.length - 1].data['customLayout'];
            }
        }));
    };
    LayoutService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LayoutService.ctorParameters = function () { return [
        { type: RoutingService }
    ]; };
    return LayoutService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * [InjectionToken description]
 * @type {?}
 */
var LayoutConfigToken = new InjectionToken('layoutConfig');
/**
 * [layoutStoreFactory description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutStoreFactory(layoutConfig) {
    return new LayoutStore(layoutConfig);
}
/**
 * [layoutProviders description]
 * @param {?} layoutConfig
 * @return {?}
 */
function layoutProvider(layoutConfig) {
    return [{
            provide: LayoutStore,
            useFactory: layoutStoreFactory,
            deps: [LayoutConfigToken]
        }, {
            provide: LayoutConfigToken,
            useValue: layoutConfig
        }
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LayoutModule = /** @class */ (function () {
    /**
     * @method constructor
     * @param parentModule [description]
     */
    function LayoutModule(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    /**
     * [forRoot description]
     * @method forRoot
     * @param  layoutConfig [description]
     * @return [description]
     */
    /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig [description]
     * @return {?} [description]
     */
    LayoutModule.forRoot = /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig [description]
     * @return {?} [description]
     */
    function (layoutConfig) {
        return {
            ngModule: LayoutModule,
            providers: __spread(layoutProvider(layoutConfig), [LayoutService])
        };
    };
    LayoutModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule],
                    exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
                    providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
                },] }
    ];
    /** @nocollapse */
    LayoutModule.ctorParameters = function () { return [
        { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return LayoutModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var colorsAliases = [
    'default',
    'primary',
    'danger',
    'warning',
    'info',
    'success'
];
/** @type {?} */
var colors = {
    'aqua': '#00c0ef',
    'aqua-active': '#00a7d0',
    'black': '#111111',
    'black-active': '#000000',
    'blue': '#0073b7',
    'blue-active': '#005384',
    'fuchsia': '#f012be',
    'fuchsia-active': '#db0ead',
    'green': '#00a65a',
    'green-active': '#008d4c',
    'gray': '#d2d6de',
    'gray-active': '#b5bbc8',
    'gray-light': '#f7f7f7',
    'light-blue': '#3c8dbc',
    'light-blue-active': '#357ca5',
    'lime': '#01ff70',
    'lime-active': '#00e765',
    'maroon': '#d81b60',
    'maroon-active': '#ca195a',
    'navy': '#001f3f',
    'navy-active': '#001a35',
    'olive': '#3d9970',
    'olive-active': '#368763',
    'orange': '#ff851b',
    'orange-active': '#ff7701',
    'purple': '#605ca8',
    'purple-active': '#555299',
    'red': '#dd4b39',
    'red-active': '#d33724',
    'teal': '#39cccc',
    'teal-active': '#30bbbb',
    'yellow': '#f39c12',
    'yellow-active': '#db8b0b',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var ColorService = /** @class */ (function () {
    /**
     * @method constructor
     * @param renderer2 [description]
     * @param elementRef [description]
     */
    function ColorService(renderer2, elementRef) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        // this.init();
        // console.log(this);
    }
    /**
     * [setBackgroundColor description]
     * @method setBackgroundColor
     * @param  color              [description]
     * @param  condition          [description]
     * @param  property           [description]
     * @param  prefix             [description]
     */
    /**
     * [setBackgroundColor description]
     * \@method setBackgroundColor
     * @param {?} color              [description]
     * @param {?} condition          [description]
     * @param {?} property           [description]
     * @param {?} prefix             [description]
     * @return {?}
     */
    ColorService.prototype.setBackgroundColor = /**
     * [setBackgroundColor description]
     * \@method setBackgroundColor
     * @param {?} color              [description]
     * @param {?} condition          [description]
     * @param {?} property           [description]
     * @param {?} prefix             [description]
     * @return {?}
     */
    function (color, condition, property, prefix) {
        if (color && condition) {
            this.resetBackgroundColor();
            if (colors[color]) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                this.currentBackgroundStyle = { property: property, color: colors[color] };
                this.renderer2.setStyle(this.elementRef.nativeElement, property, colors[color]);
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
                    this.currentBackgroundStyle = { property: property, color: color };
                    this.renderer2.setStyle(this.elementRef.nativeElement, property, color);
                }
                else if (colorsAliases.indexOf(color) !== -1) {
                    this.currentBackgroundClass = prefix ? prefix + "-" + color : color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentBackgroundClass);
                }
            }
        }
    };
    /**
     * [resetBackgroundColor description]
     * @method resetBackgroundColor
     */
    /**
     * [resetBackgroundColor description]
     * \@method resetBackgroundColor
     * @return {?}
     */
    ColorService.prototype.resetBackgroundColor = /**
     * [resetBackgroundColor description]
     * \@method resetBackgroundColor
     * @return {?}
     */
    function () {
        if (this.currentBackgroundStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentBackgroundStyle.property, this.currentBackgroundStyle.color);
        }
        else if (this.currentBackgroundClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentBackgroundClass);
        }
    };
    /**
     * [setFontColor description]
     * @method setFontColor
     * @param  color        [description]
     */
    /**
     * [setFontColor description]
     * \@method setFontColor
     * @param {?} color        [description]
     * @return {?}
     */
    ColorService.prototype.setFontColor = /**
     * [setFontColor description]
     * \@method setFontColor
     * @param {?} color        [description]
     * @return {?}
     */
    function (color) {
        if (color) {
            this.resetFontColor();
            if (color.startsWith('#') || color.startsWith('rgb')) {
                this.currentFontStyle = color;
                this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
            }
            else {
                this.currentFontClass = "text-" + color;
                this.renderer2.addClass(this.elementRef.nativeElement, this.currentFontClass);
            }
        }
    };
    /**
     * [resetFontColor description]
     * @method resetFontColor
     * @return [description]
     */
    /**
     * [resetFontColor description]
     * \@method resetFontColor
     * @return {?} [description]
     */
    ColorService.prototype.resetFontColor = /**
     * [resetFontColor description]
     * \@method resetFontColor
     * @return {?} [description]
     */
    function () {
        if (this.currentFontStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentFontStyle);
        }
        else if (this.currentFontClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentFontClass);
        }
    };
    ColorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ColorService.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    return ColorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BackgroundColorDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    function BackgroundColorDirective(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    Object.defineProperty(BackgroundColorDirective.prototype, "color", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setBackgroundColor(color, this.condition, this.property, this.prefix);
        },
        enumerable: true,
        configurable: true
    });
    BackgroundColorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkColor]',
                    providers: [ColorService]
                },] }
    ];
    /** @nocollapse */
    BackgroundColorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ColorService }
    ]; };
    BackgroundColorDirective.propDecorators = {
        condition: [{ type: Input, args: ['mkColorCondition',] }],
        prefix: [{ type: Input, args: ['mkColorPrefix',] }],
        property: [{ type: Input, args: ['mkColorProperty',] }],
        color: [{ type: Input, args: ['mkColor',] }]
    };
    return BackgroundColorDirective;
}());
var ColorDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef   [description]
     * @param renderer2    [description]
     * @param colorService [description]
     */
    function ColorDirective(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    Object.defineProperty(ColorDirective.prototype, "color", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setFontColor(color);
        },
        enumerable: true,
        configurable: true
    });
    ColorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkFontColor]',
                    providers: [ColorService]
                },] }
    ];
    /** @nocollapse */
    ColorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ColorService }
    ]; };
    ColorDirective.propDecorators = {
        color: [{ type: Input, args: ['mkFontColor',] }]
    };
    return ColorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColorModule = /** @class */ (function () {
    function ColorModule() {
    }
    ColorModule.decorators = [
        { type: NgModule, args: [{
                    exports: [BackgroundColorDirective, ColorDirective],
                    declarations: [BackgroundColorDirective, ColorDirective]
                },] }
    ];
    return ColorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var AccordionToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function AccordionToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    AccordionToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkAccordionToggle]'
                },] }
    ];
    /** @nocollapse */
    AccordionToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AccordionToggleDirective.propDecorators = {
        accordionComponent: [{ type: Input, args: ['mkAccordionToggle',] }]
    };
    return AccordionToggleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var AccordionHeaderComponent = /** @class */ (function () {
    function AccordionHeaderComponent() {
    }
    AccordionHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionHeaderComponent;
}());
/*
 *
 */
var AccordionContentComponent = /** @class */ (function () {
    function AccordionContentComponent() {
    }
    AccordionContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-content',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionContentComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionContentComponent;
}());
/*
 *
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AccordionComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-+accordion-header" is required for component "mk-+accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionComponent.propDecorators = {
        borderColor: [{ type: Input }],
        contentColor: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        headerColor: [{ type: Input }],
        headerColorHover: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        accordionHeaderComponent: [{ type: ContentChild, args: [AccordionHeaderComponent,] }],
        accordionContentComponent: [{ type: ContentChild, args: [AccordionContentComponent,] }],
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionComponent;
}());
/*
 *
 */
var AccordionGroupComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function AccordionGroupComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        // @TODO change types for listeners to all files
        this.listeners = [];
        // @TODO change types for subscriptions to all files
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AccordionGroupComponent.prototype, "_activeIndex", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.activeIndex = value instanceof Array ? value : [value];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [headerMouseLeave description]
     * @method headerMouseLeave
     * @param accordion [description]
     */
    /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.headerMouseLeave = /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion [description]
     * @return {?}
     */
    function (accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    };
    /**
     * [headerMouseEnter description]
     * @method headerMouseEnter
     * @param accordion [description]
     */
    /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.headerMouseEnter = /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion [description]
     * @return {?}
     */
    function (accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterContentInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setAccordionsIndex();
        })));
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setAccordionsToggle();
        })));
    };
    /**
     * [ngOnChanges description]
     * @method ngOnChanges
     * @param changes [description]
     * @return [description]
     */
    /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?} [description]
     */
    AccordionGroupComponent.prototype.ngOnChanges = /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?} [description]
     */
    function (changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleAccordion description]
     * @method toggleAccordion
     * @param event       [description]
     * @param toggleIndex [description]
     */
    /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event       [description]
     * @param {?} toggleIndex [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.toggleAccordion = /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event       [description]
     * @param {?} toggleIndex [description]
     * @return {?}
     */
    function (event, toggleIndex) {
        event.preventDefault();
        /** @type {?} */
        var indexOf = this.activeIndex['indexOf'](toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     * @param accordion [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    function (event, accordion) {
        accordion.isCollapsing = true;
        this.onCollapseStart.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     * @param accordion [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    function (event, accordion) {
        accordion.isCollapsing = false;
        this.onCollapseDone.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [setAccordionsIndex description]
     * @method setAccordionsIndex
     */
    /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsIndex = /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @private
     * @return {?}
     */
    function () {
        this.accordionComponents.forEach((/**
         * @param {?} accordion
         * @param {?} index
         * @return {?}
         */
        function (accordion, index) {
            accordion.index = index;
        }));
    };
    /**
     * [setAccordionsToggle description]
     * @method setAccordionsToggle
     */
    /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsToggle = /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.accordionToggleDirectives.forEach((/**
             * @param {?} accordionToggle
             * @return {?}
             */
            function (accordionToggle) {
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    _this.changeDetectorRef.detectChanges();
                })));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', (/**
                 * @return {?}
                 */
                function () {
                    AccordionGroupComponent.headerMouseEnter(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                })));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', (/**
                 * @return {?}
                 */
                function () {
                    AccordionGroupComponent.headerMouseLeave(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                })));
            }));
        }));
    };
    /**
     * [updateAccordionIsCollapsed description]
     * @method updateAccordionIsCollapsed
     */
    /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.updateAccordionIsCollapsed = /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.accordionComponents.forEach((/**
         * @param {?} accordion
         * @param {?} index
         * @return {?}
         */
        function (accordion, index) {
            accordion.isCollapsed = _this.activeIndex.indexOf(index) === -1;
        }));
    };
    AccordionGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-group',
                    template: "<div [ngClass]=\"styleClass\">\n  <div *ngFor=\"let accordion of accordionComponents\" class=\"panel box\" [mkColor]=\"accordion.borderColor\" mkColorProperty=\"border-top-color\" mkColorPrefix=\"box\">\n    <div [ngClass]=\"accordion.headerStyleClass\" [class.no-border]=\"accordion.isCollapsed && !accordion.isCollapsing\">\n      <h4 class=\"box-title\">\n        <a [mkAccordionToggle]=\"accordion\" href=\"#\" [mkFontColor]=\"accordion.headerStyleColor\" [class.collapsed]=\"accordion.isCollapsed\">\n          {{accordion.header}}\n          <ng-template *ngIf=\"!accordion.header\" [ngTemplateOutlet]=\"accordion.accordionHeaderComponent?.templateRef\"></ng-template>\n        </a>\n      </h4>\n    </div>\n    <div class=\"panel-collapse\" [mkCollapseAnimation]=\"accordion.isCollapsed\" (mkCollapseAnimation.start)=\"collapseStart($event, accordion)\" (mkCollapseAnimation.done)=\"collapseDone($event, accordion)\">\n      <div [ngClass]=\"accordion.contentStyleClass\" [mkFontColor]=\"accordion.contentColor\">\n        <ng-template [ngTemplateOutlet]=\"accordion.contentTemplateRef\"></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    AccordionGroupComponent.propDecorators = {
        _activeIndex: [{ type: Input, args: ['activeIndex',] }],
        isMultiple: [{ type: Input }],
        styleClass: [{ type: Input }],
        onCollapseStart: [{ type: Output }],
        onCollapseDone: [{ type: Output }],
        accordionComponents: [{ type: ContentChildren, args: [AccordionComponent,] }],
        accordionToggleDirectives: [{ type: ViewChildren, args: [AccordionToggleDirective,] }]
    };
    return AccordionGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
    AccordionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, AnimationsModule, ColorModule],
                    exports: [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent],
                    declarations: [AccordionToggleDirective, AccordionHeaderComponent,
                        AccordionContentComponent, AccordionComponent, AccordionGroupComponent]
                },] }
    ];
    return AccordionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var AlertComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param  changeDetectorRef [description]
     * @param  ngZone            [description]
     * @param  renderer2         [description]
     * @param  viewContainerRef  [description]
     */
    function AlertComponent(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AlertComponent.prototype, "callout", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.type = value ? 'callout' : 'alert';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertComponent.prototype, "_isDismissible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isDismissible = value;
            if (value) {
                this.dismissibleClass = this.type + "-dismissible";
            }
            else {
                this.dismissibleClass = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AlertComponent.prototype.ngAfterViewInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.dismissOnTimeout) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (!((/** @type {?} */ (_this.changeDetectorRef))).destroyed) {
                        _this.remove = true;
                        _this.changeDetectorRef.detectChanges();
                    }
                }), _this.dismissOnTimeout);
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                })));
            }
        }));
    };
    /**
     * @method ngOnDesroy
     */
    /**
     * \@method ngOnDesroy
     * @return {?}
     */
    AlertComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDesroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    AlertComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    AlertComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.onCollapseDone.emit(event);
    };
    AlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-alert',
                    template: "<div *ngIf=\"!removed\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.start)=\"collapseStart($event)\" (mkCollapseAnimation.done)=\"collapseDone($event)\">\n  <div [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\" [mkColorPrefix]=\"type\" [mkFontColor]=\"color\" [ngClass]=\"[styleClass, dismissibleClass, type]\">\n    <button *ngIf=\"isDismissible\" type=\"button\" class=\"close\" #removeButtonElement>&times;</button>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.callout .close{color:#000;opacity:.2}.callout .icon{margin-right:10px}"]
                }] }
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    AlertComponent.propDecorators = {
        backgroundColor: [{ type: Input }],
        callout: [{ type: Input }],
        color: [{ type: Input }],
        dismissOnTimeout: [{ type: Input }],
        _isDismissible: [{ type: Input, args: ['isDismissible',] }],
        styleClass: [{ type: Input }],
        onCollapseStart: [{ type: Output }],
        onCollapseDone: [{ type: Output }],
        removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }],
        containerElementRef: [{ type: ViewChild, args: ['containerElementRef', { read: ViewContainerRef },] }]
    };
    return AlertComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AlertModule = /** @class */ (function () {
    function AlertModule() {
    }
    AlertModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, AnimationsModule, ColorModule],
                    exports: [AlertComponent],
                    declarations: [AlertComponent]
                },] }
    ];
    return AlertModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxContentDirective = /** @class */ (function () {
    function BoxContentDirective() {
    }
    BoxContentDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-content'
                },] }
    ];
    return BoxContentDirective;
}());
/*
 *
 */
var BoxFooterDirective = /** @class */ (function () {
    function BoxFooterDirective() {
    }
    BoxFooterDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-footer'
                },] }
    ];
    return BoxFooterDirective;
}());
/*
 *
 */
var BoxToolsDirective = /** @class */ (function () {
    function BoxToolsDirective() {
    }
    BoxToolsDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-tools'
                },] }
    ];
    return BoxToolsDirective;
}());
/*
 *
 */
var BoxHeaderDirective = /** @class */ (function () {
    function BoxHeaderDirective() {
    }
    BoxHeaderDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-header'
                },] }
    ];
    return BoxHeaderDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function BoxComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.remove = false;
        this.listeners = [];
        this.boxColor = 'default';
        this.buttonsStyleClass = 'btn btn-box-tool';
        this.contentStyleClass = 'box-content-wrapper';
        this.footerStyleClass = 'box-footer';
        this.headerBorder = true;
        this.headerStyleClass = 'box-header';
        this.isCollapsable = true;
        this.isCollapsed = false;
        this.isRemovable = true;
        this.isSolid = false;
        this.loadingStyleClass = 'fa fa-refresh fa-spin';
        this.styleClass = 'box';
        this.onCollapseDone = new EventEmitter();
        this.onCollapseStart = new EventEmitter();
    }
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    BoxComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.toggleButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.toggleButtonElement.nativeElement, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.isCollapsed = !_this.isCollapsed;
                    _this.changeDetectorRef.detectChanges();
                })));
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                })));
            }
        }));
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    BoxComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
    };
    /**
     * [removedDone description]
     * @method removedDone
     * @param event [description]
     */
    /**
     * [removedDone description]
     * \@method removedDone
     * @param {?} event [description]
     * @return {?}
     */
    BoxComponent.prototype.removedDone = /**
     * [removedDone description]
     * \@method removedDone
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        if (event.toState === '1') {
            this.removed = true;
        }
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    BoxComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = true;
            this.onCollapseStart.emit(event);
        }
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    BoxComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        if (event.fromState !== 'void') {
            this.isCollaping = false;
            this.onCollapseDone.emit(event);
        }
    };
    BoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-box',
                    template: "<div *ngIf=\"!removed\" [mkColor]=\"boxColor\" mkColorProperty=\"border-color\" mkColorPrefix=\"box\" [ngClass]=\"styleClass\" [class.collapsed-box]=\"isCollapsed && !isCollaping\" [class.box-solid]=\"isSolid\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.done)=\"removedDone($event)\">\n  <div *ngIf=\"header || boxHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkColor]=\"boxColor\" [mkColorCondition]=\"isSolid\" mkColorProperty=\"background-color\" [class.with-border]=\"headerBorder\">\n    <h3 class=\"box-title\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-header\"></ng-content>\n    </h3>\n    <div class=\"box-tools pull-right\">\n      <ng-content select=\"mk-box-tools\"></ng-content>\n      <button *ngIf=\"isCollapsable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #toggleButtonElement>\n        <i class=\"fa\" [ngClass]=\"{'fa-plus': isCollapsed, 'fa-minus': !isCollapsed}\"></i>\n      </button>\n      <button *ngIf=\"isRemovable\" type=\"button\" [ngClass]=\"buttonsStyleClass\" #removeButtonElement>\n        <i class=\"fa fa-times\"></i>\n      </button>\n    </div>\n  </div>\n  <div [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\" [mkCollapseAnimation]=\"isCollapsed\" (mkCollapseAnimation.start)=\"collapseStart($event)\" (mkCollapseAnimation.done)=\"collapseDone($event)\">\n    <div class=\"box-body\">\n      <ng-container *ngIf=\"boxHeaderDirective || boxContentDirective || boxFooterDirective || boxToolsDirective; else noDirective\">\n        <ng-content select=\"mk-box-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </div>\n    <div *ngIf=\"footer || boxFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n      {{footer}}\n      <ng-content select=\"mk-box-footer\"></ng-content>\n    </div>\n  </div>\n  <div *ngIf=\"isLoading\" class=\"overlay\">\n    <i [ngClass]=\"loadingStyleClass\" [mkFontColor]=\"loadingColor\"></i>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".box.collapsed-box .box-body,.box.collapsed-box .box-footer{display:inherit}.box-solid{border:1px solid}.box-body{background-color:#fff}.box.box-solid.bg-color>.box-header{color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    BoxComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    BoxComponent.propDecorators = {
        boxColor: [{ type: Input }],
        buttonsStyleClass: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        contentColor: [{ type: Input }],
        footer: [{ type: Input }],
        footerColor: [{ type: Input }],
        footerStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        headerBorder: [{ type: Input }],
        headerColor: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        isCollapsable: [{ type: Input }],
        isCollapsed: [{ type: Input }],
        isLoading: [{ type: Input }],
        isRemovable: [{ type: Input }],
        isSolid: [{ type: Input }],
        loadingColor: [{ type: Input }],
        loadingStyleClass: [{ type: Input }],
        styleClass: [{ type: Input }],
        onCollapseDone: [{ type: Output }],
        onCollapseStart: [{ type: Output }],
        boxHeaderDirective: [{ type: ContentChild, args: [BoxHeaderDirective,] }],
        boxFooterDirective: [{ type: ContentChild, args: [BoxFooterDirective,] }],
        boxContentDirective: [{ type: ContentChild, args: [BoxContentDirective,] }],
        boxToolsDirective: [{ type: ContentChild, args: [BoxToolsDirective,] }],
        toggleButtonElement: [{ type: ViewChild, args: ['toggleButtonElement',] }],
        removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }]
    };
    return BoxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BoxModule = /** @class */ (function () {
    function BoxModule() {
    }
    BoxModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, AnimationsModule, ColorModule],
                    exports: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective],
                    declarations: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]
                },] }
    ];
    return BoxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxInfoContentDirective = /** @class */ (function () {
    function BoxInfoContentDirective() {
    }
    BoxInfoContentDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-info-content'
                },] }
    ];
    return BoxInfoContentDirective;
}());
/*
 *
 */
var BoxInfoFooterDirective = /** @class */ (function () {
    function BoxInfoFooterDirective() {
    }
    BoxInfoFooterDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-info-footer'
                },] }
    ];
    return BoxInfoFooterDirective;
}());
/*
 *
 */
var BoxInfoHeaderDirective = /** @class */ (function () {
    function BoxInfoHeaderDirective() {
    }
    BoxInfoHeaderDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-info-header'
                },] }
    ];
    return BoxInfoHeaderDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxInfoComponent = /** @class */ (function () {
    function BoxInfoComponent() {
        this.contentStyleClass = 'info-box-number';
        this.footerStyleClass = 'progress-description';
        this.headerStyleClass = 'info-box-text';
        this.iconColor = '#fff';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'info-box';
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    BoxInfoComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (!this.backgroundColor) {
            this.progressBarBg = this.iconBackgroundColor;
        }
    };
    BoxInfoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-box-info',
                    template: "<div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n  <span class=\"info-box-icon\" [mkColor]=\"iconBackgroundColor\" mkColorProperty=\"background-color\">\n    <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n  </span>\n  <div class=\"info-box-content\">\n    <span *ngIf=\"header || boxInfoHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-header\"></ng-content>\n    </span>\n    <span [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n      <ng-container *ngIf=\"boxInfoHeaderDirective || boxInfoContentDirective || boxInfoFooterDirective; else noDirective\">\n        <ng-content select=\"mk-box-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </span>\n    <div *ngIf=\"progressWidth\" class=\"progress\">\n      <div class=\"progress-bar\" [mkColor]=\"progressBarBg\" mkColorProperty=\"background-color\" [style.width.%]=\"progressWidth\"></div>\n    </div>\n    <span *ngIf=\"footer || boxInfoFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n      {{footer}}\n      <ng-content select=\"mk-box-footer\"></ng-content>\n    </span>\n  </div>\n</div>\n",
                    styles: [".info-box.bg-color>.info-box-content{color:#fff}"]
                }] }
    ];
    BoxInfoComponent.propDecorators = {
        backgroundColor: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        contentColor: [{ type: Input }],
        footer: [{ type: Input }],
        footerColor: [{ type: Input }],
        footerStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        headerColor: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        iconBackgroundColor: [{ type: Input }],
        iconColor: [{ type: Input }],
        iconStyleClass: [{ type: Input }],
        progressWidth: [{ type: Input }],
        styleClass: [{ type: Input }],
        boxInfoHeaderDirective: [{ type: ContentChild, args: [BoxInfoHeaderDirective,] }],
        boxInfoFooterDirective: [{ type: ContentChild, args: [BoxInfoFooterDirective,] }],
        boxInfoContentDirective: [{ type: ContentChild, args: [BoxInfoContentDirective,] }]
    };
    return BoxInfoComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BoxInfoModule = /** @class */ (function () {
    function BoxInfoModule() {
    }
    BoxInfoModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ColorModule],
                    exports: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective],
                    declarations: [BoxInfoComponent, BoxInfoHeaderDirective, BoxInfoContentDirective, BoxInfoFooterDirective]
                },] }
    ];
    return BoxInfoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxSmallFooterDirective = /** @class */ (function () {
    function BoxSmallFooterDirective() {
    }
    BoxSmallFooterDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-small-footer'
                },] }
    ];
    return BoxSmallFooterDirective;
}());
/*
 *
 */
var BoxSmallHeaderDirective = /** @class */ (function () {
    function BoxSmallHeaderDirective() {
    }
    BoxSmallHeaderDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-small-header'
                },] }
    ];
    return BoxSmallHeaderDirective;
}());
/*
 *
 */
var BoxSmallContentDirective = /** @class */ (function () {
    function BoxSmallContentDirective() {
    }
    BoxSmallContentDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-box-small-content'
                },] }
    ];
    return BoxSmallContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var BoxSmallComponent = /** @class */ (function () {
    function BoxSmallComponent() {
        this.contentStyleClass = 'small-box-content';
        this.footerStyleClass = 'small-box-footer';
        this.headerStyleClass = 'small-box-header';
        this.iconStyleClass = 'ion ion-bag';
        this.styleClass = 'small-box';
    }
    BoxSmallComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-box-small',
                    template: "<div [ngClass]=\"styleClass\" [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\">\n  <div class=\"inner\">\n    <h3 *ngIf=\"header || boxSmallHeaderDirective\" [ngClass]=\"headerStyleClass\" [mkFontColor]=\"headerColor\">\n      {{header}}\n      <ng-content select=\"mk-box-small-header\"></ng-content>\n    </h3>\n    <p [ngClass]=\"contentStyleClass\" [mkFontColor]=\"contentColor\">\n      <ng-container *ngIf=\"boxSmallHeaderDirective || boxSmallContentDirective || boxSmallFooterDirective; else noDirective\">\n        <ng-content select=\"mk-box-small-content\"></ng-content>\n      </ng-container>\n      <ng-template #noDirective>\n        <ng-content></ng-content>\n      </ng-template>\n    </p>\n  </div>\n  <div *ngIf=\"iconStyleClass\" class=\"icon\">\n    <i [ngClass]=\"iconStyleClass\" [mkFontColor]=\"iconColor\"></i>\n  </div>\n  <span *ngIf=\"footer || boxSmallFooterDirective\" [ngClass]=\"footerStyleClass\" [mkFontColor]=\"footerColor\">\n    {{footer}}\n    <ng-content select=\"mk-box-small-footer\"></ng-content>\n  </span>\n</div>\n",
                    styles: [".small-box.bg-color{color:#fff}/deep/ .small-box-footer:hover{cursor:pointer}/deep/ .small-box-footer a{color:rgba(255,255,255,.8)}/deep/ .small-box-footer:hover a{color:#fff}"]
                }] }
    ];
    BoxSmallComponent.propDecorators = {
        backgroundColor: [{ type: Input }],
        contentColor: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        footer: [{ type: Input }],
        footerColor: [{ type: Input }],
        footerStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        headerColor: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        iconColor: [{ type: Input }],
        iconStyleClass: [{ type: Input }],
        styleClass: [{ type: Input }],
        boxSmallHeaderDirective: [{ type: ContentChild, args: [BoxSmallHeaderDirective,] }],
        boxSmallFooterDirective: [{ type: ContentChild, args: [BoxSmallFooterDirective,] }],
        boxSmallContentDirective: [{ type: ContentChild, args: [BoxSmallContentDirective,] }]
    };
    return BoxSmallComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BoxSmallModule = /** @class */ (function () {
    function BoxSmallModule() {
    }
    BoxSmallModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ColorModule],
                    exports: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective],
                    declarations: [BoxSmallComponent, BoxSmallHeaderDirective, BoxSmallContentDirective, BoxSmallFooterDirective]
                },] }
    ];
    return BoxSmallModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var DropdownToggleComponent = /** @class */ (function () {
    function DropdownToggleComponent() {
    }
    DropdownToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-dropdown-toggle',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    DropdownToggleComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }],
        toggleElement: [{ type: ContentChild, args: ['toggleElement',] }]
    };
    return DropdownToggleComponent;
}());
/*
 *
 */
var DropdownMenuComponent = /** @class */ (function () {
    function DropdownMenuComponent() {
    }
    DropdownMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-dropdown-menu',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    DropdownMenuComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return DropdownMenuComponent;
}());
/*
 *
 */
var DropdownComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param elementRef [description]
     * @param ngZone [description]
     * @param renderer2 [description]
     */
    function DropdownComponent(changeDetectorRef, elementRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.buttonStyleClass = 'btn dropdown-toggle';
        this.buttonBackgroudColor = 'default';
        this.contentStyleClass = 'dropdown-menu';
        this.isCollapsed = true;
        this.isWrapper = true;
        this.styleClass = 'dropdown';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    DropdownComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var toggleNativeElement = this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement ?
            this.dropdownToggleComponent.toggleElement.nativeElement : this.toggleElement ?
            this.toggleElement : this.defaultToggleElement ?
            this.defaultToggleElement.nativeElement : null;
        if (toggleNativeElement) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.listeners.push(_this.renderer2.listen(toggleNativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.toggleDropdown(event);
                    _this.changeDetectorRef.detectChanges();
                })));
            }));
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    DropdownComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        this.unBindDocumentClickListener();
        removeListeners(this.listeners);
    };
    /**
     * [toggle description]
     * @method toggle
     * @param event [description]
     */
    /**
     * [toggle description]
     * \@method toggle
     * @param {?} event [description]
     * @return {?}
     */
    DropdownComponent.prototype.toggleDropdown = /**
     * [toggle description]
     * \@method toggle
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.preventDefault();
        this.isCollapsed = !this.isCollapsed;
        if (!this.isCollapsed) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.bindDocumentClickListener();
                }));
            }));
        }
        else {
            this.unBindDocumentClickListener();
        }
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    DropdownComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    DropdownComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [bindDocumentClickListener description]
     * @method bindDocumentClickListener
     */
    /**
     * [bindDocumentClickListener description]
     * \@method bindDocumentClickListener
     * @private
     * @return {?}
     */
    DropdownComponent.prototype.bindDocumentClickListener = /**
     * [bindDocumentClickListener description]
     * \@method bindDocumentClickListener
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.documentClickListener = _this.renderer2.listen('document', 'click', (/**
             * @return {?}
             */
            function () {
                if (!_this.isCollapsed) {
                    _this.isCollapsed = true;
                    _this.unBindDocumentClickListener();
                    _this.changeDetectorRef.detectChanges();
                }
            }));
        }));
    };
    /**
     * [unBindDocumentClickListener description]
     * @method unBindDocumentClickListener
     */
    /**
     * [unBindDocumentClickListener description]
     * \@method unBindDocumentClickListener
     * @private
     * @return {?}
     */
    DropdownComponent.prototype.unBindDocumentClickListener = /**
     * [unBindDocumentClickListener description]
     * \@method unBindDocumentClickListener
     * @private
     * @return {?}
     */
    function () {
        if (this.documentClickListener) {
            this.documentClickListener();
        }
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-dropdown, [mk-dropdown]',
                    template: "<ng-template #innerTemplate>\n  <ng-container *ngIf=\"this.dropdownToggleComponent && this.dropdownToggleComponent.toggleElement; else noToggleElement\" [ngTemplateOutlet]=\"dropdownToggleComponent.templateRef\"></ng-container>\n  <ng-template #noToggleElement>\n    <button *ngIf=\"toggleText || dropdownToggleComponent\" [mkColor]=\"buttonBackgroudColor\" mkColorProperty=\"background-color\" mkColorPrefix=\"btn\" [ngClass]=\"buttonStyleClass\" #toggleElement>\n      {{toggleText}}\n      <ng-container [ngTemplateOutlet]=\"dropdownToggleComponent?.templateRef\"></ng-container>\n    </button>\n  </ng-template>\n  <ul [ngClass]=\"contentStyleClass\" [mkCollapseAnimation]=\"isCollapsed\" (mkCollapseAnimation.start)=\"collapseStart($event)\" (mkCollapseAnimation.done)=\"collapseDone($event)\">\n    <ng-container *ngIf=\"dropdownMenuComponent; else noDropdownMenuComponent\" [ngTemplateOutlet]=\"dropdownMenuComponent.templateRef\"></ng-container>\n    <ng-template #noDropdownMenuComponent>\n      <ng-content></ng-content>\n    </ng-template>\n  </ul>\n</ng-template>\n\n<div *ngIf=\"isWrapper; else noWrapper\" [ngClass]=\"styleClass\">\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</div>\n\n<ng-template #noWrapper>\n  <ng-container *ngTemplateOutlet=\"innerTemplate\"></ng-container>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".dropdown-menu{display:block}.dropdown-menu.collapsing:not(.un-collapse){transition-property:height,padding-top,padding-bottom;padding-top:0;padding-bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    DropdownComponent.propDecorators = {
        buttonStyleClass: [{ type: Input }],
        buttonBackgroudColor: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        isCollapsed: [{ type: Input }],
        isWrapper: [{ type: Input }],
        styleClass: [{ type: Input }],
        toggleElement: [{ type: Input }],
        toggleText: [{ type: Input }],
        onCollapseStart: [{ type: Output }],
        onCollapseDone: [{ type: Output }],
        dropdownToggleComponent: [{ type: ContentChild, args: [DropdownToggleComponent,] }],
        dropdownMenuComponent: [{ type: ContentChild, args: [DropdownMenuComponent,] }],
        defaultToggleElement: [{ type: ViewChild, args: ['toggleElement',] }]
    };
    return DropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropdownModule = /** @class */ (function () {
    function DropdownModule() {
    }
    DropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, AnimationsModule, ColorModule],
                    exports: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent],
                    declarations: [DropdownComponent, DropdownToggleComponent, DropdownMenuComponent]
                },] }
    ];
    return DropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var InputGroupLabelDirective = /** @class */ (function () {
    function InputGroupLabelDirective() {
    }
    InputGroupLabelDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-input-group-label'
                },] }
    ];
    return InputGroupLabelDirective;
}());
/*
 *
 */
var InputGroupAddonLeftDirective = /** @class */ (function () {
    function InputGroupAddonLeftDirective() {
    }
    InputGroupAddonLeftDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-input-group-addon-left'
                },] }
    ];
    return InputGroupAddonLeftDirective;
}());
/*
 *
 */
var InputGroupAddonRightDirective = /** @class */ (function () {
    function InputGroupAddonRightDirective() {
    }
    InputGroupAddonRightDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-input-group-addon-right'
                },] }
    ];
    return InputGroupAddonRightDirective;
}());
/*
 *
 */
var InputGroupContentDirective = /** @class */ (function () {
    function InputGroupContentDirective() {
    }
    InputGroupContentDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'mk-input-group-content'
                },] }
    ];
    return InputGroupContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var ClassService = /** @class */ (function () {
    function ClassService(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    ClassService.prototype.applyClasses = /**
     * @param {?} cssClasses
     * @return {?}
     */
    function (cssClasses) {
        var _this = this;
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        /** @type {?} */
        var classesToRemove = this.currentClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return cssClasses.indexOf(x) === -1; }));
        classesToRemove.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Add only classes that are not in currentClasses
        /** @type {?} */
        var classesToAdd = cssClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.currentClasses.indexOf(x) === -1; }));
        classesToAdd.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Update current classes for futur updates
        this.currentClasses = __spread(cssClasses);
    };
    ClassService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ClassService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ClassService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @TODO onFocus Color
var InputTextDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param  elementRef   [description]
     * @param  renderer2    [description]
     * @param  ngControl    [description]
     * @param  colorService [description]
     * @param  classService [description]
     */
    function InputTextDirective(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this._onKeyUp = new Subject();
        this.onKeyup = this._onKeyUp.asObservable();
    }
    Object.defineProperty(InputTextDirective.prototype, "borderColor", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setBackgroundColor(color, true, 'border-color', null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "class", {
        set: /**
         * @param {?} className
         * @return {?}
         */
        function (className) {
            this.isSetClass = true;
            this.classService.applyClasses(className);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "color", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setFontColor(color);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    InputTextDirective.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    };
    /**
     * @return {?}
     */
    InputTextDirective.prototype.keyUpListener = /**
     * @return {?}
     */
    function () {
        this._onKeyUp.next(this.ngControl);
    };
    InputTextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkInputText]',
                    providers: [ColorService, ClassService]
                },] }
    ];
    /** @nocollapse */
    InputTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgControl },
        { type: ColorService },
        { type: ClassService }
    ]; };
    InputTextDirective.propDecorators = {
        borderColor: [{ type: Input }],
        class: [{ type: Input }],
        color: [{ type: Input }],
        keyUpListener: [{ type: HostListener, args: ['keyup',] }]
    };
    return InputTextDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var InputGroupComponent = /** @class */ (function () {
    function InputGroupComponent() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.invalid) {
                _this.currentColor = _this.inputErrorColor;
                _this.currentFontColor = _this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                _this.currentColor = _this.inputValidColor;
                _this.currentFontColor = _this.inputValidFontColor;
            }
            else {
                _this.currentColor = _this.inputColor;
                _this.currentFontColor = _this.inputFontColor;
            }
        })));
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        removeSubscriptions(this.subscriptions);
    };
    InputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-input-group',
                    template: "<div [ngClass]=\"wrapperClasses\" [mkColor]=\"currentColor || inputColor\" mkColorPrefix=\"has\">\n  <label *ngIf=\"label || inputGroupLabelDirective\">\n    {{label}}\n    <ng-content select=\"mk-input-group-label\"></ng-content>\n  </label>\n  <div *ngIf=\"addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon\" class=\"input-group\">\n    <span *ngIf=\"addonLeft || inputGroupAddonLeftDirective\" class=\"input-group-addon\">\n      {{addonLeft}}\n      <ng-content select=\"mk-input-group-addon-left\"></ng-content>\n    </span>\n    <ng-content select=\"mk-input-group-content\"></ng-content>\n    <span *ngIf=\"addonRight || inputGroupAddonRightDirective\" class=\"input-group-addon\">\n      {{addonRight}}\n      <ng-content select=\"mk-input-group-addon-right\"></ng-content>\n    </span>\n  </div>\n  <ng-template #noAddon><ng-content select=\"mk-input-group-content\"></ng-content></ng-template>\n</div>\n"
                }] }
    ];
    InputGroupComponent.propDecorators = {
        addonLeft: [{ type: Input }],
        addonRight: [{ type: Input }],
        inputColor: [{ type: Input }],
        inputFontColor: [{ type: Input }],
        inputErrorColor: [{ type: Input }],
        inputErrorFontColor: [{ type: Input }],
        inputValidColor: [{ type: Input }],
        inputValidFontColor: [{ type: Input }],
        label: [{ type: Input }],
        wrapperClasses: [{ type: Input }],
        inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
        inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
        inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
        inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
        inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
    };
    return InputGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputGroupModule = /** @class */ (function () {
    function InputGroupModule() {
    }
    InputGroupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ColorModule,
                        FormsModule
                    ],
                    exports: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                        InputGroupAddonRightDirective, InputGroupContentDirective],
                    declarations: [InputGroupComponent, InputGroupLabelDirective, InputGroupAddonLeftDirective,
                        InputGroupAddonRightDirective, InputGroupContentDirective]
                },] }
    ];
    return InputGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputTextModule = /** @class */ (function () {
    function InputTextModule() {
    }
    InputTextModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ColorModule,
                        FormsModule
                    ],
                    exports: [InputTextDirective],
                    declarations: [InputTextDirective]
                },] }
    ];
    return InputTextModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 *
 */
var TabToggleDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param elementRef [description]
     */
    function TabToggleDirective(elementRef) {
        this.elementRef = elementRef;
    }
    TabToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkTabToggle]'
                },] }
    ];
    /** @nocollapse */
    TabToggleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TabToggleDirective.propDecorators = {
        tabComponent: [{ type: Input, args: ['mkTabToggle',] }]
    };
    return TabToggleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @TODO Vertical tabs
/*
 *
 */
var TabHeaderComponent = /** @class */ (function () {
    function TabHeaderComponent() {
    }
    TabHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    TabHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabHeaderComponent;
}());
/*
 *
 */
var TabContentComponent = /** @class */ (function () {
    function TabContentComponent() {
    }
    TabContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab-content',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    TabContentComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabContentComponent;
}());
/*
 *
 */
var TabComponent = /** @class */ (function () {
    function TabComponent() {
        this.isActive = false;
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (this.tabContentComponent) {
            this.contentTemplateRef = this.tabContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    TabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tab',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    TabComponent.propDecorators = {
        header: [{ type: Input }],
        isDisabled: [{ type: Input }],
        tabColor: [{ type: Input }],
        templateRef: [{ type: ViewChild, args: ['templateRef',] }],
        tabHeaderComponent: [{ type: ContentChild, args: [TabHeaderComponent,] }],
        tabContentComponent: [{ type: ContentChild, args: [TabContentComponent,] }]
    };
    return TabComponent;
}());
/*
 *
 */
var TabsHeaderComponent = /** @class */ (function () {
    function TabsHeaderComponent() {
    }
    TabsHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tabs-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    TabsHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return TabsHeaderComponent;
}());
/*
 *
 */
var TabsComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function TabsComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.listeners = [];
        this.subscriptions = [];
        this.headerStyleClass = 'header pull-left';
        this.navStyleClass = 'nav nav-tabs';
        this.contentStyleClass = 'tab-content';
        this.styleClass = 'nav-tabs-custom';
        this.onClose = new EventEmitter();
        this.onOpen = new EventEmitter();
    }
    Object.defineProperty(TabsComponent.prototype, "activeTabIndex", {
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.activatedTabIndex = index;
            this.changeDetectorRef.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterContentInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        // Set tab index on load.
        this.setTabIndex();
        // Update tab index if tabs is updated.
        this.subscriptions.push(this.tabs.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setTabIndex();
        })));
        // Open tab on load.
        this.openTabIndex();
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    TabsComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        // Set tab toggles on load.
        this.setTabsToggle();
        // Update tab toggles if tabs is updated.
        this.subscriptions.push(this.tabToggleDirectives.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setTabsToggle();
        })));
    };
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    /**
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?}
     */
    TabsComponent.prototype.ngOnChanges = /**
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?}
     */
    function (changes) {
        if (changes.activeTabIndex) {
            this.openTabIndex();
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    TabsComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleTab description]
     * @method toggleTab
     */
    /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    TabsComponent.prototype.openTabIndex = /**
     * [toggleTab description]
     * \@method toggleTab
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tabs) {
            this.tabs.forEach((/**
             * @param {?} tab
             * @return {?}
             */
            function (tab) {
                if (_this.activatedTabIndex === tab.index || (_this.activatedTabIndex === undefined && tab.index === 0)) {
                    tab.isActive = true;
                    _this.onOpen.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
                else if (tab.isActive) {
                    tab.isActive = false;
                    _this.onClose.emit({ index: tab.index });
                    _this.changeDetectorRef.detectChanges();
                }
            }));
        }
    };
    /**
     * [openTab description]
     * @method openTab
     * @param event     [description]
     * @param tabToOpen [description]
     */
    /**
     * [openTab description]
     * \@method openTab
     * @param {?} event     [description]
     * @param {?} tabToOpen [description]
     * @return {?}
     */
    TabsComponent.prototype.openTab = /**
     * [openTab description]
     * \@method openTab
     * @param {?} event     [description]
     * @param {?} tabToOpen [description]
     * @return {?}
     */
    function (event, tabToOpen) {
        var _this = this;
        event.preventDefault();
        tabToOpen.isActive = true;
        this.onOpen.emit({ event: event, index: tabToOpen.index });
        this.tabs.forEach((/**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            if (tab.isActive && tabToOpen !== tab) {
                tab.isActive = false;
                _this.onClose.emit({ event: event, index: tab.index });
            }
        }));
    };
    /**
     * [setTabIndex description]
     * @method setTabIndex
     */
    /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @private
     * @return {?}
     */
    TabsComponent.prototype.setTabIndex = /**
     * [setTabIndex description]
     * \@method setTabIndex
     * @private
     * @return {?}
     */
    function () {
        this.tabs.forEach((/**
         * @param {?} tab
         * @param {?} index
         * @return {?}
         */
        function (tab, index) {
            tab.index = index;
        }));
        this.changeDetectorRef.detectChanges();
    };
    /**
     * [setTabsToggle description]
     * @method setTabsToggle
     */
    /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @private
     * @return {?}
     */
    TabsComponent.prototype.setTabsToggle = /**
     * [setTabsToggle description]
     * \@method setTabsToggle
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.tabToggleDirectives.forEach((/**
             * @param {?} tabToggle
             * @return {?}
             */
            function (tabToggle) {
                _this.listeners.push(_this.renderer2.listen(tabToggle.elementRef.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.openTab(event, tabToggle.tabComponent);
                    _this.changeDetectorRef.detectChanges();
                })));
            }));
        }));
    };
    TabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-tabs',
                    template: "<div [ngClass]=\"styleClass\">\n  <ul [ngClass]=\"navStyleClass\" [class.pull-right]=\"header || tabsHeaderComponent\">\n    <li *ngFor=\"let tab of tabs\" [class.active]=\"tab.isActive\" [mkColor]=\"tab.tabColor || tabsColor\" mkColorProperty=\"border-top-color\">\n      <a *ngIf=\"!tab.isDisabled\" [mkTabToggle]=\"tab\" href=\"#\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent?.templateRef\"></ng-template>\n      </a>\n      <ng-template [ngIf]=\"tab.isDisabled\">\n        {{tab.header}}\n        <ng-template *ngIf=\"!tab.header\" [ngTemplateOutlet]=\"tab.tabHeaderComponent.templateRef\"></ng-template>\n      </ng-template>\n    </li>\n    <li *ngIf=\"tabsHeaderComponent || header\" [ngClass]=\"headerStyleClass\">\n      {{header}}\n      <ng-template *ngIf=\"!header\" [ngTemplateOutlet]=\"tabsHeaderComponent.templateRef\"></ng-template>\n    </li>\n  </ul>\n  <div [ngClass]=\"contentStyleClass\">\n    <div *ngFor=\"let tab of tabs\" class=\"tab-pane\" [class.active]=\"tab.isActive\">\n      <ng-template [ngTemplateOutlet]=\"tab.contentTemplateRef\"></ng-template>\n    </div>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".nav-tabs-custom>.nav-tabs>li{border-top-width:0}.nav-tabs-custom>.nav-tabs>li.active{border-top-width:3px}"]
                }] }
    ];
    /** @nocollapse */
    TabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    TabsComponent.propDecorators = {
        activeTabIndex: [{ type: Input }],
        header: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        navStyleClass: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        styleClass: [{ type: Input }],
        tabsColor: [{ type: Input }],
        onClose: [{ type: Output }],
        onOpen: [{ type: Output }],
        tabsHeaderComponent: [{ type: ContentChild, args: [TabsHeaderComponent,] }],
        tabs: [{ type: ContentChildren, args: [TabComponent,] }],
        tabToggleDirectives: [{ type: ViewChildren, args: [TabToggleDirective,] }]
    };
    return TabsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TabsModule = /** @class */ (function () {
    function TabsModule() {
    }
    TabsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ColorModule],
                    exports: [TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent],
                    declarations: [TabToggleDirective, TabsComponent, TabsHeaderComponent, TabComponent, TabHeaderComponent, TabContentComponent]
                },] }
    ];
    return TabsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LayoutModule, LayoutService, LayoutStore, AccordionModule, AlertModule, BoxModule, BoxInfoModule, BoxSmallModule, BreadcrumbsModule, DropdownModule, InputGroupModule, InputTextModule, TabsModule, AccordionComponent as ɵbi, AccordionContentComponent as ɵbh, AccordionGroupComponent as ɵbj, AccordionHeaderComponent as ɵbg, AccordionToggleDirective as ɵbk, AlertComponent as ɵbl, CollapseAnimationDirective as ɵr, AnimationsModule as ɵq, BoxInfoComponent as ɵbr, BoxInfoContentDirective as ɵbs, BoxInfoFooterDirective as ɵbt, BoxInfoHeaderDirective as ɵbu, BoxSmallComponent as ɵbv, BoxSmallContentDirective as ɵby, BoxSmallFooterDirective as ɵbw, BoxSmallHeaderDirective as ɵbx, BoxComponent as ɵbm, BoxContentDirective as ɵbn, BoxFooterDirective as ɵbo, BoxHeaderDirective as ɵbq, BoxToolsDirective as ɵbp, BreadcrumbsComponent as ɵb, BackgroundColorDirective as ɵbd, ColorDirective as ɵbe, ColorModule as ɵbc, ColorService as ɵbf, DropdownComponent as ɵcb, DropdownMenuComponent as ɵca, DropdownToggleComponent as ɵbz, InputGroupComponent as ɵcc, InputGroupAddonLeftDirective as ɵce, InputGroupAddonRightDirective as ɵcf, InputGroupContentDirective as ɵcg, InputGroupLabelDirective as ɵcd, InputTextDirective as ɵch, ContentComponent as ɵd, ContentModule as ɵa, FooterComponent as ɵk, FooterLeftComponent as ɵi, FooterRightComponent as ɵj, FooterModule as ɵh, FooterService as ɵg, HeaderComponent as ɵo, HeaderLogoComponent as ɵm, HeaderLogoMiniComponent as ɵn, HeaderModule as ɵl, HeaderService as ɵf, LayoutConfigToken as ɵz, layoutProvider as ɵbb, layoutStoreFactory as ɵba, SidebarLeftComponent as ɵs, SidebarLeftToggleDirective as ɵt, SidebarLeftModule as ɵp, SidebarRightComponent as ɵw, SidebarRightModule as ɵv, SidebarRightService as ɵe, WrapperComponent as ɵy, WrapperModule as ɵx, WrapperService as ɵu, ClassService as ɵci, RoutingService as ɵc, TabComponent as ɵcl, TabContentComponent as ɵck, TabHeaderComponent as ɵcj, TabsComponent as ɵcn, TabsHeaderComponent as ɵcm, TabToggleDirective as ɵco };

//# sourceMappingURL=angular-admin-lte.js.map