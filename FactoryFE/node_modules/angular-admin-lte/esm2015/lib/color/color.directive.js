/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef } from '@angular/core';
import { ColorService } from './color.service';
export class BackgroundColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        this.condition = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setBackgroundColor(color, this.condition, this.property, this.prefix);
    }
}
BackgroundColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkColor]',
                providers: [ColorService]
            },] }
];
/** @nocollapse */
BackgroundColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
BackgroundColorDirective.propDecorators = {
    condition: [{ type: Input, args: ['mkColorCondition',] }],
    prefix: [{ type: Input, args: ['mkColorPrefix',] }],
    property: [{ type: Input, args: ['mkColorProperty',] }],
    color: [{ type: Input, args: ['mkColor',] }]
};
if (false) {
    /** @type {?} */
    BackgroundColorDirective.prototype.condition;
    /** @type {?} */
    BackgroundColorDirective.prototype.prefix;
    /** @type {?} */
    BackgroundColorDirective.prototype.property;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    BackgroundColorDirective.prototype.colorService;
}
export class ColorDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} colorService [description]
     */
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setFontColor(color);
    }
}
ColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkFontColor]',
                providers: [ColorService]
            },] }
];
/** @nocollapse */
ColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
ColorDirective.propDecorators = {
    color: [{ type: Input, args: ['mkFontColor',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    ColorDirective.prototype.colorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvY29sb3IvY29sb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0vQyxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7O0lBT25DLFlBQ1UsVUFBc0IsRUFDdEIsU0FBb0IsRUFDcEIsWUFBMEI7UUFGMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBR1QsY0FBUyxHQUFHLElBQUksQ0FBQztJQUZ6QyxDQUFDOzs7OztJQUtKLElBQXNCLEtBQUssQ0FBQyxLQUFhO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUYsQ0FBQzs7O1lBdEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDO2FBQzFCOzs7O1lBUHFDLFVBQVU7WUFBckIsU0FBUztZQUUzQixZQUFZOzs7d0JBbUJsQixLQUFLLFNBQUMsa0JBQWtCO3FCQUN4QixLQUFLLFNBQUMsZUFBZTt1QkFDckIsS0FBSyxTQUFDLGlCQUFpQjtvQkFDdkIsS0FBSyxTQUFDLFNBQVM7Ozs7SUFIaEIsNkNBQTRDOztJQUM1QywwQ0FBdUM7O0lBQ3ZDLDRDQUEyQzs7Ozs7SUFQekMsOENBQThCOzs7OztJQUM5Qiw2Q0FBNEI7Ozs7O0lBQzVCLGdEQUFrQzs7QUFldEMsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUFPekIsWUFDVSxVQUFzQixFQUN0QixTQUFvQixFQUNwQixZQUEwQjtRQUYxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDakMsQ0FBQzs7Ozs7SUFFSixJQUEwQixLQUFLLENBQUMsS0FBYTtRQUMzQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUFuQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUM7YUFDMUI7Ozs7WUFoQ3FDLFVBQVU7WUFBckIsU0FBUztZQUUzQixZQUFZOzs7b0JBNENsQixLQUFLLFNBQUMsYUFBYTs7Ozs7OztJQUxsQixvQ0FBOEI7Ozs7O0lBQzlCLG1DQUE0Qjs7Ozs7SUFDNUIsc0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbG9yU2VydmljZSB9IGZyb20gJy4vY29sb3Iuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0NvbG9yXScsXG4gIHByb3ZpZGVyczogW0NvbG9yU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZENvbG9yRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gY29sb3JTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWtDb2xvckNvbmRpdGlvbicpIGNvbmRpdGlvbiA9IHRydWU7XG4gIEBJbnB1dCgnbWtDb2xvclByZWZpeCcpIHByZWZpeDogc3RyaW5nO1xuICBASW5wdXQoJ21rQ29sb3JQcm9wZXJ0eScpIHByb3BlcnR5OiBzdHJpbmc7XG4gIEBJbnB1dCgnbWtDb2xvcicpIHNldCBjb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yLCB0aGlzLmNvbmRpdGlvbiwgdGhpcy5wcm9wZXJ0eSwgdGhpcy5wcmVmaXgpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0ZvbnRDb2xvcl0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIENvbG9yRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGVsZW1lbnRSZWYgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSByZW5kZXJlcjIgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gY29sb3JTZXJ2aWNlIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWtGb250Q29sb3InKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEZvbnRDb2xvcihjb2xvcik7XG4gIH1cbn1cbiJdfQ==