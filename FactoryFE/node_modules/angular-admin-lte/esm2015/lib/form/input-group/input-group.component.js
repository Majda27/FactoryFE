/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input } from '@angular/core';
import { removeSubscriptions } from '../../helpers';
import { InputGroupAddonLeftDirective, InputGroupAddonRightDirective, InputGroupContentDirective, InputGroupLabelDirective } from './input-group.directive';
import { InputTextDirective } from '../input-text/input-text.directive';
/*
 *
 */
export class InputGroupComponent {
    constructor() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value.invalid) {
                this.currentColor = this.inputErrorColor;
                this.currentFontColor = this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                this.currentColor = this.inputValidColor;
                this.currentFontColor = this.inputValidFontColor;
            }
            else {
                this.currentColor = this.inputColor;
                this.currentFontColor = this.inputFontColor;
            }
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        removeSubscriptions(this.subscriptions);
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-input-group',
                template: "<div [ngClass]=\"wrapperClasses\" [mkColor]=\"currentColor || inputColor\" mkColorPrefix=\"has\">\n  <label *ngIf=\"label || inputGroupLabelDirective\">\n    {{label}}\n    <ng-content select=\"mk-input-group-label\"></ng-content>\n  </label>\n  <div *ngIf=\"addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon\" class=\"input-group\">\n    <span *ngIf=\"addonLeft || inputGroupAddonLeftDirective\" class=\"input-group-addon\">\n      {{addonLeft}}\n      <ng-content select=\"mk-input-group-addon-left\"></ng-content>\n    </span>\n    <ng-content select=\"mk-input-group-content\"></ng-content>\n    <span *ngIf=\"addonRight || inputGroupAddonRightDirective\" class=\"input-group-addon\">\n      {{addonRight}}\n      <ng-content select=\"mk-input-group-addon-right\"></ng-content>\n    </span>\n  </div>\n  <ng-template #noAddon><ng-content select=\"mk-input-group-content\"></ng-content></ng-template>\n</div>\n"
            }] }
];
InputGroupComponent.propDecorators = {
    addonLeft: [{ type: Input }],
    addonRight: [{ type: Input }],
    inputColor: [{ type: Input }],
    inputFontColor: [{ type: Input }],
    inputErrorColor: [{ type: Input }],
    inputErrorFontColor: [{ type: Input }],
    inputValidColor: [{ type: Input }],
    inputValidFontColor: [{ type: Input }],
    label: [{ type: Input }],
    wrapperClasses: [{ type: Input }],
    inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
    inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
    inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
    inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
    inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.subscriptions;
    /** @type {?} */
    InputGroupComponent.prototype.currentColor;
    /** @type {?} */
    InputGroupComponent.prototype.currentFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.addonLeft;
    /** @type {?} */
    InputGroupComponent.prototype.addonRight;
    /** @type {?} */
    InputGroupComponent.prototype.inputColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.label;
    /** @type {?} */
    InputGroupComponent.prototype.wrapperClasses;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupLabelDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonLeftDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonRightDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupContentDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputTextDirective;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvZm9ybS9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsNkJBQTZCLEVBQzdCLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDekIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQVl4RSxNQUFNLE9BQU8sbUJBQW1CO0lBSmhDO1FBS1Usa0JBQWEsR0FBd0IsRUFBRSxDQUFDO1FBT3ZDLGVBQVUsR0FBRyxTQUFTLENBQUM7UUFFdkIsb0JBQWUsR0FBRyxRQUFRLENBQUM7UUFFM0Isb0JBQWUsR0FBRyxTQUFTLENBQUM7UUFHNUIsbUJBQWMsR0FBRyxZQUFZLENBQUM7SUEwQnpDLENBQUM7Ozs7SUFsQkMsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLENBQUMsS0FBZ0IsRUFBRSxFQUFFO1lBQ3JGLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO2FBQ2xEO2lCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7YUFDbEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUM3QztRQUNILENBQUMsRUFBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7O0lBRUQsV0FBVztRQUNULG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7WUE1Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLGs5QkFBMkM7YUFDNUM7Ozt3QkFPRSxLQUFLO3lCQUNMLEtBQUs7eUJBQ0wsS0FBSzs2QkFDTCxLQUFLOzhCQUNMLEtBQUs7a0NBQ0wsS0FBSzs4QkFDTCxLQUFLO2tDQUNMLEtBQUs7b0JBQ0wsS0FBSzs2QkFDTCxLQUFLO3VDQUVMLFlBQVksU0FBQyx3QkFBd0I7MkNBQ3JDLFlBQVksU0FBQyw0QkFBNEI7NENBQ3pDLFlBQVksU0FBQyw2QkFBNkI7eUNBQzFDLFlBQVksU0FBQywwQkFBMEI7aUNBQ3ZDLFlBQVksU0FBQyxrQkFBa0I7Ozs7Ozs7SUFwQmhDLDRDQUFnRDs7SUFFaEQsMkNBQTRCOztJQUM1QiwrQ0FBZ0M7O0lBRWhDLHdDQUEyQjs7SUFDM0IseUNBQTRCOztJQUM1Qix5Q0FBZ0M7O0lBQ2hDLDZDQUFnQzs7SUFDaEMsOENBQW9DOztJQUNwQyxrREFBcUM7O0lBQ3JDLDhDQUFxQzs7SUFDckMsa0RBQXFDOztJQUNyQyxvQ0FBdUI7O0lBQ3ZCLDZDQUF1Qzs7SUFFdkMsdURBQWtHOztJQUNsRywyREFBOEc7O0lBQzlHLDREQUFpSDs7SUFDakgseURBQXdHOztJQUN4RyxpREFBZ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyByZW1vdmVTdWJzY3JpcHRpb25zIH0gZnJvbSAnLi4vLi4vaGVscGVycyc7XG5cbmltcG9ydCB7XG4gIElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlXG59IGZyb20gJy4vaW5wdXQtZ3JvdXAuZGlyZWN0aXZlJztcblxuaW1wb3J0IHsgSW5wdXRUZXh0RGlyZWN0aXZlIH0gZnJvbSAnLi4vaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuXG4vKlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWstaW5wdXQtZ3JvdXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtZ3JvdXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcblxuICBwdWJsaWMgY3VycmVudENvbG9yOiBzdHJpbmc7XG4gIHB1YmxpYyBjdXJyZW50Rm9udENvbG9yOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgYWRkb25MZWZ0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFkZG9uUmlnaHQ6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRDb2xvciA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgaW5wdXRGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRFcnJvckNvbG9yID0gJ2Rhbmdlcic7XG4gIEBJbnB1dCgpIGlucHV0RXJyb3JGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgaW5wdXRWYWxpZENvbG9yID0gJ3N1Y2Nlc3MnO1xuICBASW5wdXQoKSBpbnB1dFZhbGlkRm9udENvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHdyYXBwZXJDbGFzc2VzID0gJ2Zvcm0tZ3JvdXAnO1xuXG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cExhYmVsRGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cExhYmVsRGlyZWN0aXZlOiBJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmU6IElucHV0R3JvdXBBZGRvbkxlZnREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZTogSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZTogSW5wdXRHcm91cENvbnRlbnREaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRUZXh0RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRUZXh0RGlyZWN0aXZlOiBJbnB1dFRleHREaXJlY3RpdmU7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuaW5wdXRUZXh0RGlyZWN0aXZlLm9uS2V5dXAuc3Vic2NyaWJlKCh2YWx1ZTogTmdDb250cm9sKSA9PiB7XG4gICAgICBpZiAodmFsdWUuaW52YWxpZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHRoaXMuaW5wdXRFcnJvckNvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q29sb3IgPSB0aGlzLmlucHV0RXJyb3JGb250Q29sb3I7XG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZS5pbnZhbGlkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dFZhbGlkQ29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRWYWxpZEZvbnRDb2xvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dENvbG9yO1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q29sb3IgPSB0aGlzLmlucHV0Rm9udENvbG9yO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHJlbW92ZVN1YnNjcmlwdGlvbnModGhpcy5zdWJzY3JpcHRpb25zKTtcbiAgfVxufVxuIl19