/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { ColorService } from '../../color/color.service';
import { ClassService } from '../../services/class.service';
// @TODO onFocus Color
export class InputTextDirective {
    /**
     * \@method constructor
     * @param {?} elementRef   [description]
     * @param {?} renderer2    [description]
     * @param {?} ngControl    [description]
     * @param {?} colorService [description]
     * @param {?} classService [description]
     */
    constructor(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this._onKeyUp = new Subject();
        this.onKeyup = this._onKeyUp.asObservable();
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set borderColor(color) {
        this.colorService.setBackgroundColor(color, true, 'border-color', null);
    }
    /**
     * @param {?} className
     * @return {?}
     */
    set class(className) {
        this.isSetClass = true;
        this.classService.applyClasses(className);
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set color(color) {
        this.colorService.setFontColor(color);
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    }
    /**
     * @return {?}
     */
    keyUpListener() {
        this._onKeyUp.next(this.ngControl);
    }
}
InputTextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkInputText]',
                providers: [ColorService, ClassService]
            },] }
];
/** @nocollapse */
InputTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgControl },
    { type: ColorService },
    { type: ClassService }
];
InputTextDirective.propDecorators = {
    borderColor: [{ type: Input }],
    class: [{ type: Input }],
    color: [{ type: Input }],
    keyUpListener: [{ type: HostListener, args: ['keyup',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.defaultClass;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.isSetClass;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype._onKeyUp;
    /** @type {?} */
    InputTextDirective.prototype.onKeyup;
    /** @type {?} */
    InputTextDirective.prototype.elementRef;
    /** @type {?} */
    InputTextDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.colorService;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.classService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBUTVELE1BQU0sT0FBTyxrQkFBa0I7Ozs7Ozs7OztJQTBCN0IsWUFDUyxVQUFzQixFQUN0QixTQUFvQixFQUNuQixTQUFvQixFQUNwQixZQUEwQixFQUMxQixZQUEwQjtRQUozQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQTlCNUIsaUJBQVksR0FBRyxjQUFjLENBQUM7UUFFOUIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFhLENBQUM7UUFFckMsWUFBTyxHQUEwQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBMkJsRSxDQUFDOzs7OztJQXpCSixJQUFhLFdBQVcsQ0FBQyxLQUFhO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7Ozs7SUFDRCxJQUFhLEtBQUssQ0FBQyxTQUFpQjtRQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUNELElBQWEsS0FBSyxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFxQkQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Ozs7SUFFc0IsYUFBYTtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsU0FBUyxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQzthQUN4Qzs7OztZQWJxQyxVQUFVO1lBQXJCLFNBQVM7WUFDM0IsU0FBUztZQUlULFlBQVk7WUFDWixZQUFZOzs7MEJBZWxCLEtBQUs7b0JBR0wsS0FBSztvQkFJTCxLQUFLOzRCQTZCTCxZQUFZLFNBQUMsT0FBTzs7Ozs7OztJQTFDckIsMENBQXNDOzs7OztJQUN0Qyx3Q0FBNEI7Ozs7O0lBQzVCLHNDQUE0Qzs7SUFFNUMscUNBQXFFOztJQXNCbkUsd0NBQTZCOztJQUM3Qix1Q0FBMkI7Ozs7O0lBQzNCLHVDQUE0Qjs7Ozs7SUFDNUIsMENBQWtDOzs7OztJQUNsQywwQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29sb3IvY29sb3Iuc2VydmljZSc7XG5pbXBvcnQgeyBDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGFzcy5zZXJ2aWNlJztcblxuLy8gQFRPRE8gb25Gb2N1cyBDb2xvclxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtJbnB1dFRleHRdJyxcbiAgcHJvdmlkZXJzOiBbQ29sb3JTZXJ2aWNlLCBDbGFzc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIElucHV0VGV4dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgZGVmYXVsdENsYXNzID0gJ2Zvcm0tY29udHJvbCc7XG4gIHByaXZhdGUgaXNTZXRDbGFzczogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfb25LZXlVcCA9IG5ldyBTdWJqZWN0PE5nQ29udHJvbD4oKTtcblxuICBwdWJsaWMgb25LZXl1cDogT2JzZXJ2YWJsZTxOZ0NvbnRyb2w+ID0gdGhpcy5fb25LZXlVcC5hc09ic2VydmFibGUoKTtcblxuICBASW5wdXQoKSBzZXQgYm9yZGVyQ29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcihjb2xvciwgdHJ1ZSwgJ2JvcmRlci1jb2xvcicsIG51bGwpO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjbGFzcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuaXNTZXRDbGFzcyA9IHRydWU7XG4gICAgdGhpcy5jbGFzc1NlcnZpY2UuYXBwbHlDbGFzc2VzKGNsYXNzTmFtZSk7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRGb250Q29sb3IoY29sb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtICBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHJlbmRlcmVyMiAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgbmdDb250cm9sICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICBjb2xvclNlcnZpY2UgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGNsYXNzU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgcmVuZGVyZXIyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xhc3NTZXJ2aWNlOiBDbGFzc1NlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTZXRDbGFzcykge1xuICAgICAgdGhpcy5jbGFzc1NlcnZpY2UuYXBwbHlDbGFzc2VzKHRoaXMuZGVmYXVsdENsYXNzKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcpIGtleVVwTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5fb25LZXlVcC5uZXh0KHRoaXMubmdDb250cm9sKTtcbiAgfVxufVxuIl19