/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { WrapperService } from '../wrapper/wrapper.service';
import { LayoutStore } from '../layout.store';
import { SidebarRightService } from './sidebar-right.service';
import { removeListeners, removeSubscriptions } from '../../helpers';
export class SidebarRightComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     * @param {?} layoutStore
     * @param {?} sidebarRightService
     * @param {?} wrapperService
     */
    constructor(elementRef, renderer2, layoutStore, sidebarRightService, wrapperService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.layoutStore = layoutStore;
        this.sidebarRightService = sidebarRightService;
        this.wrapperService = wrapperService;
        this.listeners = [];
        this.subscriptions = [];
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar');
        this.subscriptions.push(this.layoutStore.isSidebarRightCollapsed.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.isSidebarRightCollapsed = value;
            if (!value) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'control-sidebar-open');
                if (!this.isSidebarRightOverContent) {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'control-sidebar-open');
                if (!this.isSidebarRightOverContent) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        })));
        this.subscriptions.push(this.layoutStore.isSidebarRightOverContent.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.isSidebarRightOverContent = value;
            if (!this.isSidebarRightCollapsed) {
                if (value) {
                    this.renderer2.removeClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
                else {
                    this.renderer2.addClass(this.wrapperService.wrapperElementRef.nativeElement, 'control-sidebar-open');
                }
            }
        })));
        this.subscriptions.push(this.layoutStore.sidebarRightSkin.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (this.skin !== value) {
                this.renderer2.removeClass(this.elementRef.nativeElement, `control-sidebar-${this.skin}`);
            }
            this.skin = value;
            this.renderer2.addClass(this.elementRef.nativeElement, `control-sidebar-${value}`);
        })));
    }
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    ngAfterViewInit() {
        this.sidebarRightService.elementRef = this.sidebarContentElement;
    }
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    ngOnDestroy() {
        this.listeners = removeListeners(this.listeners);
        this.subscriptions = removeSubscriptions(this.subscriptions);
    }
}
SidebarRightComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-layout-sidebar-right',
                template: "<div #sidebarContentElement class=\"control-sidebar-content\">\n  <ng-content></ng-content>\n</div>\n<div class=\"control-sidebar-bg\"></div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;height:100%}.control-sidebar-bg{z-index:-1}/deep/ .tab-content{padding:10px 15px}"]
            }] }
];
/** @nocollapse */
SidebarRightComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LayoutStore },
    { type: SidebarRightService },
    { type: WrapperService }
];
SidebarRightComponent.propDecorators = {
    sidebarContentElement: [{ type: ViewChild, args: ['sidebarContentElement',] }]
};
if (false) {
    /** @type {?} */
    SidebarRightComponent.prototype.layout;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.skin;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.isSidebarRightOverContent;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.isSidebarRightCollapsed;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.listeners;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.subscriptions;
    /** @type {?} */
    SidebarRightComponent.prototype.sidebarContentElement;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.layoutStore;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.sidebarRightService;
    /**
     * @type {?}
     * @private
     */
    SidebarRightComponent.prototype.wrapperService;
}
//# sourceMappingURL=data:application/json;base64,