/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Renderer2, ElementRef } from '@angular/core';
/*
 *
 */
export class ClassService {
    /**
     * @param {?} elementRef
     * @param {?} renderer2
     */
    constructor(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    applyClasses(cssClasses) {
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        /** @type {?} */
        const classesToRemove = this.currentClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => cssClasses.indexOf(x) === -1));
        classesToRemove.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        cssClasse => {
            if (cssClasse) {
                this.renderer2.removeClass(this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Add only classes that are not in currentClasses
        /** @type {?} */
        const classesToAdd = cssClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => this.currentClasses.indexOf(x) === -1));
        classesToAdd.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        cssClasse => {
            if (cssClasse) {
                this.renderer2.addClass(this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Update current classes for futur updates
        this.currentClasses = [...cssClasses];
    }
}
ClassService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ClassService.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.currentClasses;
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQU1sRSxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFHdkIsWUFDVSxVQUFzQixFQUN0QixTQUFvQjtRQURwQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFKdEIsbUJBQWMsR0FBa0IsRUFBRSxDQUFDO0lBS3hDLENBQUM7Ozs7O0lBR0csWUFBWSxDQUFDLFVBQWtDO1FBQ3BELElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO1lBQ2xDLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDOzs7Y0FHSyxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDO1FBQ3JGLGVBQWUsQ0FBQyxPQUFPOzs7O1FBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDdEU7UUFDSCxDQUFDLEVBQUMsQ0FBQzs7O2NBR0csWUFBWSxHQUFHLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQztRQUNsRixZQUFZLENBQUMsT0FBTzs7OztRQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9CLElBQUksU0FBUyxFQUFFO2dCQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ25FO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFSCwyQ0FBMkM7UUFDM0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUksVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBakNGLFVBQVU7Ozs7WUFMcUIsVUFBVTtZQUFyQixTQUFTOzs7Ozs7O0lBTzVCLHNDQUEyQzs7Ozs7SUFHekMsa0NBQThCOzs7OztJQUM5QixpQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLypcbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDbGFzc1NlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnRDbGFzc2VzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG5cbiAgcHVibGljIGFwcGx5Q2xhc3Nlcyhjc3NDbGFzc2VzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBjc3NDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgb25seSBjbGFzc2VzIHRoYXQgYXJlIG5vdCBpbiBjc3NDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gdGhpcy5jdXJyZW50Q2xhc3Nlcy5maWx0ZXIoeCA9PiBjc3NDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9SZW1vdmUuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBvbmx5IGNsYXNzZXMgdGhhdCBhcmUgbm90IGluIGN1cnJlbnRDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvQWRkID0gY3NzQ2xhc3Nlcy5maWx0ZXIoeCA9PiB0aGlzLmN1cnJlbnRDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9BZGQuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBjdXJyZW50IGNsYXNzZXMgZm9yIGZ1dHVyIHVwZGF0ZXNcbiAgICB0aGlzLmN1cnJlbnRDbGFzc2VzID0gWy4uLiBjc3NDbGFzc2VzXTtcbiAgfVxufVxuIl19