/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NavigationEnd, PRIMARY_OUTLET, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
/**
 * @record
 */
export function Path() { }
if (false) {
    /** @type {?} */
    Path.prototype.data;
    /** @type {?} */
    Path.prototype.params;
    /** @type {?} */
    Path.prototype.url;
}
/**
 * @record
 */
export function Paths() { }
/*
 *
 */
export class RoutingService {
    /**
     * \@method constructor
     * @param {?} router [description]
     */
    constructor(router) {
        this.router = router;
        this.onChange = new BehaviorSubject(undefined);
        this.events = new BehaviorSubject(undefined);
        this.init();
    }
    /**
     * [createUrl description]
     * \@method createUrl
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static createUrl(route) {
        /** @type {?} */
        const url = route.url.map((/**
         * @param {?} urlSegment
         * @return {?}
         */
        urlSegment => urlSegment.toString())).join('/');
        return url;
    }
    /**
     * [isChildrenSelfRoute description]
     * \@method isChildrenSelfRoute
     * @private
     * @param {?} route [description]
     * @return {?} [description]
     */
    static isChildrenSelfRoute(route) {
        route.routeConfig.children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        child => {
            if (child.path === '' && (child.component || child.loadChildren)) {
                return true;
            }
        }));
        return false;
    }
    /**
     * [createBreadcrumb description]
     * \@method createBreadcrumb
     * @private
     * @param {?} route [description]
     * @param {?} url   [description]
     * @return {?} [description]
     */
    static createBreadcrumb(route, url) {
        /** @type {?} */
        let isUrl = true;
        if (route.children.length !== 0 && route.firstChild.routeConfig.path) {
            if (url !== '/' && !route.routeConfig.loadChildren && !route.routeConfig.component && !RoutingService.isChildrenSelfRoute(route)) {
                isUrl = false;
            }
        }
        return {
            data: route.data,
            params: route.params,
            url: isUrl ? url : null
        };
    }
    /**
     * [init description]
     * \@method init
     * @private
     * @return {?}
     */
    init() {
        this.router.events.subscribe((/**
         * @param {?} routeEvent
         * @return {?}
         */
        routeEvent => {
            // https://github.com/angular/angular/issues/17473: event not fired anymore on load for routed component.
            if (routeEvent instanceof NavigationEnd) {
                this.events.next(routeEvent);
                /** @type {?} */
                let route = this.router.routerState.root.snapshot;
                /** @type {?} */
                let tmpUrl = '';
                /** @type {?} */
                let url = '';
                /** @type {?} */
                let rootRoot = true;
                /** @type {?} */
                const paths = [];
                while (route.children.length) {
                    route = route.firstChild;
                    tmpUrl = `/${RoutingService.createUrl(route)}`;
                    if (route.outlet !== PRIMARY_OUTLET || (!route.routeConfig.path && !rootRoot)) {
                        continue;
                    }
                    rootRoot = false;
                    if (route.params || route.data) {
                        for (const key in route.params) {
                            if (!key) {
                                continue;
                            }
                            if (route.data['title']) {
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                                route.data['title'] = route.data['title'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['breadcrumbs']) {
                                route.data['breadcrumbs'] = route.data['breadcrumbs'].replace(`:${key}`, route.params[key]);
                            }
                            if (route.data['description']) {
                                route.data['description'] = route.data['description'].replace(`:${key}`, route.params[key]);
                            }
                        }
                    }
                    if (tmpUrl === '/') {
                        paths.push(RoutingService.createBreadcrumb(route, tmpUrl));
                    }
                    else {
                        url += tmpUrl;
                        paths.push(RoutingService.createBreadcrumb(route, url));
                    }
                }
                this.onChange.next(paths);
            }
        }));
    }
}
RoutingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RoutingService.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /** @type {?} */
    RoutingService.prototype.onChange;
    /** @type {?} */
    RoutingService.prototype.events;
    /**
     * @type {?}
     * @private
     */
    RoutingService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcm91dGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBZ0QsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV0SCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7O0FBS3ZDLDBCQUlDOzs7SUFIQyxvQkFBYTs7SUFDYixzQkFBZTs7SUFDZixtQkFBWTs7Ozs7QUFNZCwyQkFBNkM7Ozs7QUFPN0MsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBUXpCLFlBQ1UsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFSakIsYUFBUSxHQUEyQixJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRSxXQUFNLEdBQWlDLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBUzNFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7O0lBUU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUE2Qjs7Y0FDOUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRzs7OztRQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN4RSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Ozs7Ozs7O0lBUU8sTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQTZCO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUN6QyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRSxJ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LENBQUMsYUFBYSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7NkJBQzdGOzRCQUNELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtnQ0FDN0IsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs2QkFDN0Y7eUJBQ0Y7cUJBQ0Y7b0JBRUQsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFO3dCQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztxQkFDNUQ7eUJBQU07d0JBQ0wsR0FBRyxJQUFJLE1BQU0sQ0FBQzt3QkFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDekQ7aUJBQ0Y7Z0JBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQXZIRixVQUFVOzs7O1lBdEIyRSxNQUFNOzs7O0lBd0IxRixrQ0FBeUU7O0lBQ3pFLGdDQUE2RTs7Ozs7SUFPM0UsZ0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgRXZlbnQgYXMgUm91dGVyRXZlbnQsIE5hdmlnYXRpb25FbmQsIFBSSU1BUllfT1VUTEVULCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLypcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gIGRhdGE6IE9iamVjdDtcbiAgcGFyYW1zOiBPYmplY3Q7XG4gIHVybDogc3RyaW5nO1xufVxuXG4vKlxuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRocyBleHRlbmRzIEFycmF5PFBhdGg+IHt9XG5cblxuLypcbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb3V0aW5nU2VydmljZSB7XG4gIHB1YmxpYyBvbkNoYW5nZTogQmVoYXZpb3JTdWJqZWN0PFBhdGhzPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgcHVibGljIGV2ZW50czogQmVoYXZpb3JTdWJqZWN0PFJvdXRlckV2ZW50PiA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcm91dGVyIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogW2NyZWF0ZVVybCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBjcmVhdGVVcmxcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVVcmwocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IHJvdXRlLnVybC5tYXAodXJsU2VnbWVudCA9PiB1cmxTZWdtZW50LnRvU3RyaW5nKCkpLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIFtpc0NoaWxkcmVuU2VsZlJvdXRlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGlzQ2hpbGRyZW5TZWxmUm91dGVcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBpc0NoaWxkcmVuU2VsZlJvdXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcm91dGUucm91dGVDb25maWcuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZiAoY2hpbGQucGF0aCA9PT0gJycgJiYgKGNoaWxkLmNvbXBvbmVudCB8fCBjaGlsZC5sb2FkQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFtjcmVhdGVCcmVhZGNydW1iIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGNyZWF0ZUJyZWFkY3J1bWJcbiAgICogQHBhcmFtIHJvdXRlIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIHVybCAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVCcmVhZGNydW1iKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCB1cmw6IHN0cmluZyk6IFBhdGgge1xuICAgIGxldCBpc1VybCA9IHRydWU7XG5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4ubGVuZ3RoICE9PSAwICYmIHJvdXRlLmZpcnN0Q2hpbGQucm91dGVDb25maWcucGF0aCkge1xuICAgICAgaWYgKHVybCAhPT0gJy8nICYmICFyb3V0ZS5yb3V0ZUNvbmZpZy5sb2FkQ2hpbGRyZW4gJiYgIXJvdXRlLnJvdXRlQ29uZmlnLmNvbXBvbmVudCAmJiAhUm91dGluZ1NlcnZpY2UuaXNDaGlsZHJlblNlbGZSb3V0ZShyb3V0ZSkpIHtcbiAgICAgICAgaXNVcmwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogcm91dGUuZGF0YSxcbiAgICAgIHBhcmFtcyA6IHJvdXRlLnBhcmFtcyxcbiAgICAgIHVybDogaXNVcmwgPyB1cmwgOiBudWxsXG4gICAgfTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFtpbml0IGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGluaXRcbiAgICovXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHJvdXRlRXZlbnQgPT4ge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTc0NzM6IGV2ZW50IG5vdCBmaXJlZCBhbnltb3JlIG9uIGxvYWQgZm9yIHJvdXRlZCBjb21wb25lbnQuXG4gICAgICBpZiAocm91dGVFdmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgdGhpcy5ldmVudHMubmV4dChyb3V0ZUV2ZW50KTtcbiAgICAgICAgbGV0IHJvdXRlID0gdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUucm9vdC5zbmFwc2hvdCxcbiAgICAgICAgICB0bXBVcmwgPSAnJyxcbiAgICAgICAgICB1cmwgPSAnJyxcbiAgICAgICAgICByb290Um9vdCA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgcGF0aHM6IFBhdGhzID0gW107XG5cbiAgICAgICAgd2hpbGUgKHJvdXRlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICB0bXBVcmwgPSBgLyR7Um91dGluZ1NlcnZpY2UuY3JlYXRlVXJsKHJvdXRlKX1gO1xuXG4gICAgICAgICAgaWYgKHJvdXRlLm91dGxldCAhPT0gUFJJTUFSWV9PVVRMRVQgfHwgKCFyb3V0ZS5yb3V0ZUNvbmZpZy5wYXRoICYmICFyb290Um9vdCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvb3RSb290ID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAocm91dGUucGFyYW1zIHx8IHJvdXRlLmRhdGEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJvdXRlLnBhcmFtcykge1xuICAgICAgICAgICAgICBpZiAoIWtleSkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICBpZiAocm91dGUuZGF0YVsndGl0bGUnXSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLmRhdGFbJ3RpdGxlJ10gPSByb3V0ZS5kYXRhWyd0aXRsZSddLnJlcGxhY2UoYDoke2tleX1gLCByb3V0ZS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgICAgcm91dGUuZGF0YVsndGl0bGUnXSA9IHJvdXRlLmRhdGFbJ3RpdGxlJ10ucmVwbGFjZShgOiR7a2V5fWAsIHJvdXRlLnBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocm91dGUuZGF0YVsnYnJlYWRjcnVtYnMnXSkge1xuICAgICAgICAgICAgICAgIHJvdXRlLmRhdGFbJ2JyZWFkY3J1bWJzJ10gPSByb3V0ZS5kYXRhWydicmVhZGNydW1icyddLnJlcGxhY2UoYDoke2tleX1gLCByb3V0ZS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJvdXRlLmRhdGFbJ2Rlc2NyaXB0aW9uJ10pIHtcbiAgICAgICAgICAgICAgICByb3V0ZS5kYXRhWydkZXNjcmlwdGlvbiddID0gcm91dGUuZGF0YVsnZGVzY3JpcHRpb24nXS5yZXBsYWNlKGA6JHtrZXl9YCwgcm91dGUucGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRtcFVybCA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXRocy5wdXNoKFJvdXRpbmdTZXJ2aWNlLmNyZWF0ZUJyZWFkY3J1bWIocm91dGUsIHRtcFVybCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgKz0gdG1wVXJsO1xuICAgICAgICAgICAgcGF0aHMucHVzaChSb3V0aW5nU2VydmljZS5jcmVhdGVCcmVhZGNydW1iKHJvdXRlLCB1cmwpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uQ2hhbmdlLm5leHQocGF0aHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=