/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, ElementRef, EventEmitter, Renderer2, NgZone } from '@angular/core';
/*
 *
 */
export class CollapseAnimationDirective {
    /**
     * \@method constructor
     * @param {?} elementRef [description]
     * @param {?} ngZone     [description]
     * @param {?} renderer2  [description]
     */
    constructor(elementRef, ngZone, renderer2) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.firstStart = true;
        this.collapseAnimationDuration = 350;
        this.startEventEmitter = new EventEmitter();
        this.doneEventEmitter = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _isCollapsed(value) {
        this.lastIsCollapsed = this.isCollapsed;
        this.isCollapsed = value;
        if (!this.firstStart) {
            this.emit('start');
            if (value) {
                this.collapse();
            }
            else if (value === false) {
                this.unCollapse();
            }
        }
    }
    /**
     * \@method ngOnInit
     * @return {?}
     */
    ngOnInit() {
        if (this.collapseAnimationDuration && this.collapseAnimationDuration !== 350) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-duration', `${this.collapseAnimationDuration}ms`);
        }
        if (this.collapseAnimationTiming) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'transition-timing-function', this.collapseAnimationTiming);
        }
    }
    /**
     * \@method ngAfterContentInit
     * @return {?}
     */
    ngAfterContentInit() {
        this.emit('start');
        if (this.isCollapsed) {
            this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
            this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
        }
        this.emit('done');
        this.firstStart = false;
        this.subscriptions();
    }
    /**
     * [ngOnDestroy description]
     * \@method ngOnDestroy
     * @return {?} [description]
     */
    ngOnDestroy() {
        if (this.listener) {
            this.listener();
        }
    }
    /**
     * [subscriptions description]
     * \@method subscriptions
     * @private
     * @return {?}
     */
    subscriptions() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.listener = this.renderer2.listen(this.elementRef.nativeElement, 'transitionend', (/**
             * @return {?}
             */
            () => {
                if (!this.isCollapsed) {
                    this.renderer2.removeClass(this.elementRef.nativeElement, 'un-collapse');
                    this.renderer2.removeClass(this.elementRef.nativeElement, 'collapsing');
                }
                else {
                    this.renderer2.setStyle(this.elementRef.nativeElement, 'display', 'none');
                }
                requestAnimationFrame((/**
                 * @return {?}
                 */
                () => {
                    this.renderer2.removeStyle(this.elementRef.nativeElement, 'height');
                    this.emit('done');
                    this.transitioning = false;
                }));
            }));
        }));
    }
    /**
     * [unCollapse description]
     * \@method unCollapse
     * @private
     * @return {?}
     */
    unCollapse() {
        this.transitioning = true;
        this.renderer2.addClass(this.elementRef.nativeElement, 'un-collapse');
        this.renderer2.removeStyle(this.elementRef.nativeElement, 'display');
        this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `${this.elementRef.nativeElement.scrollHeight}px`);
    }
    /**
     * [collapse description]
     * \@method collapse
     * @private
     * @return {?}
     */
    collapse() {
        requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            if (!this.transitioning) {
                this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `${this.elementRef.nativeElement.offsetHeight}px`);
                this.renderer2.addClass(this.elementRef.nativeElement, 'collapsing');
            }
            this.transitioning = true;
            requestAnimationFrame((/**
             * @return {?}
             */
            () => {
                this.renderer2.setStyle(this.elementRef.nativeElement, 'height', `0px`);
            }));
        }));
    }
    /**
     * @private
     * @param {?} phaseName
     * @return {?}
     */
    emit(phaseName) {
        /** @type {?} */
        const event = {
            element: this.elementRef.nativeElement,
            fromState: this.lastIsCollapsed === undefined ? 'void' : this.lastIsCollapsed ? '1' : '0',
            phaseName: phaseName,
            toState: this.isCollapsed === undefined ? 'void' : this.isCollapsed ? '1' : '0',
            totalTime: this.collapseAnimationDuration,
            triggerName: 'mkCollapseAnimation'
        };
        if (phaseName === 'done') {
            this.doneEventEmitter.emit(event);
        }
        else if (phaseName === 'start') {
            this.startEventEmitter.emit(event);
        }
    }
}
CollapseAnimationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkCollapseAnimation]'
            },] }
];
/** @nocollapse */
CollapseAnimationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
CollapseAnimationDirective.propDecorators = {
    collapseAnimationDuration: [{ type: Input }],
    collapseAnimationTiming: [{ type: Input }],
    _isCollapsed: [{ type: Input, args: ['mkCollapseAnimation',] }],
    startEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.start',] }],
    doneEventEmitter: [{ type: Output, args: ['mkCollapseAnimation.done',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.firstStart;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.isCollapsed;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.lastIsCollapsed;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.transitioning;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.listener;
    /** @type {?} */
    CollapseAnimationDirective.prototype.collapseAnimationDuration;
    /** @type {?} */
    CollapseAnimationDirective.prototype.collapseAnimationTiming;
    /** @type {?} */
    CollapseAnimationDirective.prototype.startEventEmitter;
    /** @type {?} */
    CollapseAnimationDirective.prototype.doneEventEmitter;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    CollapseAnimationDirective.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,