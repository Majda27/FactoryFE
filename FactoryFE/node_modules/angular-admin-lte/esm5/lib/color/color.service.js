/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Renderer2, ElementRef } from '@angular/core';
import { colors, colorsAliases } from './color.definition';
/*
 *
 */
var ColorService = /** @class */ (function () {
    /**
     * @method constructor
     * @param renderer2 [description]
     * @param elementRef [description]
     */
    function ColorService(renderer2, elementRef) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
        // this.init();
        // console.log(this);
    }
    /**
     * [setBackgroundColor description]
     * @method setBackgroundColor
     * @param  color              [description]
     * @param  condition          [description]
     * @param  property           [description]
     * @param  prefix             [description]
     */
    /**
     * [setBackgroundColor description]
     * \@method setBackgroundColor
     * @param {?} color              [description]
     * @param {?} condition          [description]
     * @param {?} property           [description]
     * @param {?} prefix             [description]
     * @return {?}
     */
    ColorService.prototype.setBackgroundColor = /**
     * [setBackgroundColor description]
     * \@method setBackgroundColor
     * @param {?} color              [description]
     * @param {?} condition          [description]
     * @param {?} property           [description]
     * @param {?} prefix             [description]
     * @return {?}
     */
    function (color, condition, property, prefix) {
        if (color && condition) {
            this.resetBackgroundColor();
            if (colors[color]) {
                this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                this.currentBackgroundStyle = { property: property, color: colors[color] };
                this.renderer2.setStyle(this.elementRef.nativeElement, property, colors[color]);
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
                    this.currentBackgroundStyle = { property: property, color: color };
                    this.renderer2.setStyle(this.elementRef.nativeElement, property, color);
                }
                else if (colorsAliases.indexOf(color) !== -1) {
                    this.currentBackgroundClass = prefix ? prefix + "-" + color : color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentBackgroundClass);
                }
            }
        }
    };
    /**
     * [resetBackgroundColor description]
     * @method resetBackgroundColor
     */
    /**
     * [resetBackgroundColor description]
     * \@method resetBackgroundColor
     * @return {?}
     */
    ColorService.prototype.resetBackgroundColor = /**
     * [resetBackgroundColor description]
     * \@method resetBackgroundColor
     * @return {?}
     */
    function () {
        if (this.currentBackgroundStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentBackgroundStyle.property, this.currentBackgroundStyle.color);
        }
        else if (this.currentBackgroundClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentBackgroundClass);
        }
    };
    /**
     * [setFontColor description]
     * @method setFontColor
     * @param  color        [description]
     */
    /**
     * [setFontColor description]
     * \@method setFontColor
     * @param {?} color        [description]
     * @return {?}
     */
    ColorService.prototype.setFontColor = /**
     * [setFontColor description]
     * \@method setFontColor
     * @param {?} color        [description]
     * @return {?}
     */
    function (color) {
        if (color) {
            this.resetFontColor();
            if (color.startsWith('#') || color.startsWith('rgb')) {
                this.currentFontStyle = color;
                this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
            }
            else {
                this.currentFontClass = "text-" + color;
                this.renderer2.addClass(this.elementRef.nativeElement, this.currentFontClass);
            }
        }
    };
    /**
     * [resetFontColor description]
     * @method resetFontColor
     * @return [description]
     */
    /**
     * [resetFontColor description]
     * \@method resetFontColor
     * @return {?} [description]
     */
    ColorService.prototype.resetFontColor = /**
     * [resetFontColor description]
     * \@method resetFontColor
     * @return {?} [description]
     */
    function () {
        if (this.currentFontStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentFontStyle);
        }
        else if (this.currentFontClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentFontClass);
        }
    };
    ColorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ColorService.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    return ColorService;
}());
export { ColorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.currentBackgroundStyle;
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.currentBackgroundClass;
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.currentFontStyle;
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.currentFontClass;
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    ColorService.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,