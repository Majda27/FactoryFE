/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, NgZone, Output, QueryList, Renderer2, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { AccordionToggleDirective } from './accordion.directive';
import { removeListeners, removeSubscriptions } from '../helpers';
/*
 *
 */
var AccordionHeaderComponent = /** @class */ (function () {
    function AccordionHeaderComponent() {
    }
    AccordionHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-header',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionHeaderComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionHeaderComponent;
}());
export { AccordionHeaderComponent };
if (false) {
    /** @type {?} */
    AccordionHeaderComponent.prototype.templateRef;
}
/*
 *
 */
var AccordionContentComponent = /** @class */ (function () {
    function AccordionContentComponent() {
    }
    AccordionContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-content',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionContentComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionContentComponent;
}());
export { AccordionContentComponent };
if (false) {
    /** @type {?} */
    AccordionContentComponent.prototype.templateRef;
}
/*
 *
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
        this.contentStyleClass = 'box-body';
        this.headerStyleClass = 'box-header with-border';
    }
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AccordionComponent.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        this.headerStyleColor = this.headerColor;
        if (!this.header && !this.accordionHeaderComponent) {
            throw new Error('Attribute "header" OR Component "mk-+accordion-header" is required for component "mk-+accordion"');
        }
        if (this.accordionContentComponent) {
            this.contentTemplateRef = this.accordionContentComponent.templateRef;
        }
        else {
            this.contentTemplateRef = this.templateRef;
        }
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion',
                    template: '<ng-template #templateRef><ng-content></ng-content></ng-template>'
                }] }
    ];
    AccordionComponent.propDecorators = {
        borderColor: [{ type: Input }],
        contentColor: [{ type: Input }],
        contentStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        headerColor: [{ type: Input }],
        headerColorHover: [{ type: Input }],
        headerStyleClass: [{ type: Input }],
        accordionHeaderComponent: [{ type: ContentChild, args: [AccordionHeaderComponent,] }],
        accordionContentComponent: [{ type: ContentChild, args: [AccordionContentComponent,] }],
        templateRef: [{ type: ViewChild, args: ['templateRef',] }]
    };
    return AccordionComponent;
}());
export { AccordionComponent };
if (false) {
    /** @type {?} */
    AccordionComponent.prototype.contentTemplateRef;
    /** @type {?} */
    AccordionComponent.prototype.headerStyleColor;
    /** @type {?} */
    AccordionComponent.prototype.isCollapsing;
    /** @type {?} */
    AccordionComponent.prototype.isCollapsed;
    /** @type {?} */
    AccordionComponent.prototype.index;
    /** @type {?} */
    AccordionComponent.prototype.borderColor;
    /** @type {?} */
    AccordionComponent.prototype.contentColor;
    /** @type {?} */
    AccordionComponent.prototype.contentStyleClass;
    /** @type {?} */
    AccordionComponent.prototype.header;
    /** @type {?} */
    AccordionComponent.prototype.headerColor;
    /** @type {?} */
    AccordionComponent.prototype.headerColorHover;
    /** @type {?} */
    AccordionComponent.prototype.headerStyleClass;
    /** @type {?} */
    AccordionComponent.prototype.accordionHeaderComponent;
    /** @type {?} */
    AccordionComponent.prototype.accordionContentComponent;
    /** @type {?} */
    AccordionComponent.prototype.templateRef;
}
/*
 *
 */
var AccordionGroupComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param changeDetectorRef [description]
     * @param ngZone            [description]
     * @param renderer2         [description]
     */
    function AccordionGroupComponent(changeDetectorRef, ngZone, renderer2) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.activeIndex = [0];
        // @TODO change types for listeners to all files
        this.listeners = [];
        // @TODO change types for subscriptions to all files
        this.subscriptions = [];
        this.styleClass = 'box-group';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AccordionGroupComponent.prototype, "_activeIndex", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.activeIndex = value instanceof Array ? value : [value];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [headerMouseLeave description]
     * @method headerMouseLeave
     * @param accordion [description]
     */
    /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.headerMouseLeave = /**
     * [headerMouseLeave description]
     * \@method headerMouseLeave
     * @param {?} accordion [description]
     * @return {?}
     */
    function (accordion) {
        accordion.headerStyleColor = accordion.headerColor;
    };
    /**
     * [headerMouseEnter description]
     * @method headerMouseEnter
     * @param accordion [description]
     */
    /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.headerMouseEnter = /**
     * [headerMouseEnter description]
     * \@method headerMouseEnter
     * @param {?} accordion [description]
     * @return {?}
     */
    function (accordion) {
        if (accordion.headerColorHover) {
            accordion.headerStyleColor = accordion.headerColorHover;
        }
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterContentInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.setAccordionsIndex();
        this.updateAccordionIsCollapsed();
        this.subscriptions.push(this.accordionComponents.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setAccordionsIndex();
        })));
    };
    /**
     * @method ngAfterViewInit
     */
    /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngAfterViewInit = /**
     * \@method ngAfterViewInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.setAccordionsToggle();
        this.subscriptions.push(this.accordionToggleDirectives.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.setAccordionsToggle();
        })));
    };
    /**
     * [ngOnChanges description]
     * @method ngOnChanges
     * @param changes [description]
     * @return [description]
     */
    /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?} [description]
     */
    AccordionGroupComponent.prototype.ngOnChanges = /**
     * [ngOnChanges description]
     * \@method ngOnChanges
     * @param {?} changes [description]
     * @return {?} [description]
     */
    function (changes) {
        if (changes._activeIndex.firstChange === false) {
            this.updateAccordionIsCollapsed();
        }
    };
    /**
     * @method ngOnDestroy
     */
    /**
     * \@method ngOnDestroy
     * @return {?}
     */
    AccordionGroupComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDestroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
        removeSubscriptions(this.subscriptions);
    };
    /**
     * [toggleAccordion description]
     * @method toggleAccordion
     * @param event       [description]
     * @param toggleIndex [description]
     */
    /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event       [description]
     * @param {?} toggleIndex [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.toggleAccordion = /**
     * [toggleAccordion description]
     * \@method toggleAccordion
     * @param {?} event       [description]
     * @param {?} toggleIndex [description]
     * @return {?}
     */
    function (event, toggleIndex) {
        event.preventDefault();
        /** @type {?} */
        var indexOf = this.activeIndex['indexOf'](toggleIndex);
        if (indexOf === -1) {
            if (this.isMultiple) {
                this.activeIndex.push(toggleIndex);
            }
            else {
                this.activeIndex = [toggleIndex];
            }
        }
        else {
            if (this.isMultiple) {
                this.activeIndex.splice(indexOf, 1);
            }
            else {
                this.activeIndex = [];
            }
        }
        this.updateAccordionIsCollapsed();
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     * @param accordion [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    function (event, accordion) {
        accordion.isCollapsing = true;
        this.onCollapseStart.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     * @param accordion [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    AccordionGroupComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @param {?} accordion [description]
     * @return {?}
     */
    function (event, accordion) {
        accordion.isCollapsing = false;
        this.onCollapseDone.emit({ animationEvent: event, index: accordion.index });
    };
    /**
     * [setAccordionsIndex description]
     * @method setAccordionsIndex
     */
    /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsIndex = /**
     * [setAccordionsIndex description]
     * \@method setAccordionsIndex
     * @private
     * @return {?}
     */
    function () {
        this.accordionComponents.forEach((/**
         * @param {?} accordion
         * @param {?} index
         * @return {?}
         */
        function (accordion, index) {
            accordion.index = index;
        }));
    };
    /**
     * [setAccordionsToggle description]
     * @method setAccordionsToggle
     */
    /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.setAccordionsToggle = /**
     * [setAccordionsToggle description]
     * \@method setAccordionsToggle
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.listeners = removeListeners(this.listeners);
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.accordionToggleDirectives.forEach((/**
             * @param {?} accordionToggle
             * @return {?}
             */
            function (accordionToggle) {
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.toggleAccordion(event, accordionToggle.accordionComponent.index);
                    _this.changeDetectorRef.detectChanges();
                })));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseenter', (/**
                 * @return {?}
                 */
                function () {
                    AccordionGroupComponent.headerMouseEnter(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                })));
                _this.listeners.push(_this.renderer2.listen(accordionToggle.elementRef.nativeElement, 'mouseleave', (/**
                 * @return {?}
                 */
                function () {
                    AccordionGroupComponent.headerMouseLeave(accordionToggle.accordionComponent);
                    _this.changeDetectorRef.detectChanges();
                })));
            }));
        }));
    };
    /**
     * [updateAccordionIsCollapsed description]
     * @method updateAccordionIsCollapsed
     */
    /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @private
     * @return {?}
     */
    AccordionGroupComponent.prototype.updateAccordionIsCollapsed = /**
     * [updateAccordionIsCollapsed description]
     * \@method updateAccordionIsCollapsed
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.accordionComponents.forEach((/**
         * @param {?} accordion
         * @param {?} index
         * @return {?}
         */
        function (accordion, index) {
            accordion.isCollapsed = _this.activeIndex.indexOf(index) === -1;
        }));
    };
    AccordionGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-accordion-group',
                    template: "<div [ngClass]=\"styleClass\">\n  <div *ngFor=\"let accordion of accordionComponents\" class=\"panel box\" [mkColor]=\"accordion.borderColor\" mkColorProperty=\"border-top-color\" mkColorPrefix=\"box\">\n    <div [ngClass]=\"accordion.headerStyleClass\" [class.no-border]=\"accordion.isCollapsed && !accordion.isCollapsing\">\n      <h4 class=\"box-title\">\n        <a [mkAccordionToggle]=\"accordion\" href=\"#\" [mkFontColor]=\"accordion.headerStyleColor\" [class.collapsed]=\"accordion.isCollapsed\">\n          {{accordion.header}}\n          <ng-template *ngIf=\"!accordion.header\" [ngTemplateOutlet]=\"accordion.accordionHeaderComponent?.templateRef\"></ng-template>\n        </a>\n      </h4>\n    </div>\n    <div class=\"panel-collapse\" [mkCollapseAnimation]=\"accordion.isCollapsed\" (mkCollapseAnimation.start)=\"collapseStart($event, accordion)\" (mkCollapseAnimation.done)=\"collapseDone($event, accordion)\">\n      <div [ngClass]=\"accordion.contentStyleClass\" [mkFontColor]=\"accordion.contentColor\">\n        <ng-template [ngTemplateOutlet]=\"accordion.contentTemplateRef\"></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    AccordionGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    AccordionGroupComponent.propDecorators = {
        _activeIndex: [{ type: Input, args: ['activeIndex',] }],
        isMultiple: [{ type: Input }],
        styleClass: [{ type: Input }],
        onCollapseStart: [{ type: Output }],
        onCollapseDone: [{ type: Output }],
        accordionComponents: [{ type: ContentChildren, args: [AccordionComponent,] }],
        accordionToggleDirectives: [{ type: ViewChildren, args: [AccordionToggleDirective,] }]
    };
    return AccordionGroupComponent;
}());
export { AccordionGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.listeners;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.subscriptions;
    /** @type {?} */
    AccordionGroupComponent.prototype.isMultiple;
    /** @type {?} */
    AccordionGroupComponent.prototype.styleClass;
    /** @type {?} */
    AccordionGroupComponent.prototype.onCollapseStart;
    /** @type {?} */
    AccordionGroupComponent.prototype.onCollapseDone;
    /** @type {?} */
    AccordionGroupComponent.prototype.accordionComponents;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.accordionToggleDirectives;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AccordionGroupComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,