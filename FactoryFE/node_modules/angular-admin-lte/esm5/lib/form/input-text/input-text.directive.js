/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { ColorService } from '../../color/color.service';
import { ClassService } from '../../services/class.service';
// @TODO onFocus Color
var InputTextDirective = /** @class */ (function () {
    /**
     * @method constructor
     * @param  elementRef   [description]
     * @param  renderer2    [description]
     * @param  ngControl    [description]
     * @param  colorService [description]
     * @param  classService [description]
     */
    function InputTextDirective(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this._onKeyUp = new Subject();
        this.onKeyup = this._onKeyUp.asObservable();
    }
    Object.defineProperty(InputTextDirective.prototype, "borderColor", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setBackgroundColor(color, true, 'border-color', null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "class", {
        set: /**
         * @param {?} className
         * @return {?}
         */
        function (className) {
            this.isSetClass = true;
            this.classService.applyClasses(className);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTextDirective.prototype, "color", {
        set: /**
         * @param {?} color
         * @return {?}
         */
        function (color) {
            this.colorService.setFontColor(color);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    InputTextDirective.prototype.ngOnInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    };
    /**
     * @return {?}
     */
    InputTextDirective.prototype.keyUpListener = /**
     * @return {?}
     */
    function () {
        this._onKeyUp.next(this.ngControl);
    };
    InputTextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mkInputText]',
                    providers: [ColorService, ClassService]
                },] }
    ];
    /** @nocollapse */
    InputTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgControl },
        { type: ColorService },
        { type: ClassService }
    ]; };
    InputTextDirective.propDecorators = {
        borderColor: [{ type: Input }],
        class: [{ type: Input }],
        color: [{ type: Input }],
        keyUpListener: [{ type: HostListener, args: ['keyup',] }]
    };
    return InputTextDirective;
}());
export { InputTextDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.defaultClass;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.isSetClass;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype._onKeyUp;
    /** @type {?} */
    InputTextDirective.prototype.onKeyup;
    /** @type {?} */
    InputTextDirective.prototype.elementRef;
    /** @type {?} */
    InputTextDirective.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.colorService;
    /**
     * @type {?}
     * @private
     */
    InputTextDirective.prototype.classService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFkbWluLWx0ZS8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBSTVEO0lBc0JFOzs7Ozs7O09BT0c7SUFDSCw0QkFDUyxVQUFzQixFQUN0QixTQUFvQixFQUNuQixTQUFvQixFQUNwQixZQUEwQixFQUMxQixZQUEwQjtRQUozQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQTlCNUIsaUJBQVksR0FBRyxjQUFjLENBQUM7UUFFOUIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFhLENBQUM7UUFFckMsWUFBTyxHQUEwQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBMkJsRSxDQUFDO0lBekJKLHNCQUFhLDJDQUFXOzs7OztRQUF4QixVQUF5QixLQUFhO1lBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUUsQ0FBQzs7O09BQUE7SUFDRCxzQkFBYSxxQ0FBSzs7Ozs7UUFBbEIsVUFBbUIsU0FBaUI7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7SUFDRCxzQkFBYSxxQ0FBSzs7Ozs7UUFBbEIsVUFBbUIsS0FBYTtZQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDOzs7T0FBQTtJQWtCRDs7T0FFRzs7Ozs7SUFDSCxxQ0FBUTs7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7OztJQUVzQiwwQ0FBYTs7O0lBQXBDO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7O2dCQWpERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7aUJBQ3hDOzs7O2dCQWJxQyxVQUFVO2dCQUFyQixTQUFTO2dCQUMzQixTQUFTO2dCQUlULFlBQVk7Z0JBQ1osWUFBWTs7OzhCQWVsQixLQUFLO3dCQUdMLEtBQUs7d0JBSUwsS0FBSztnQ0E2QkwsWUFBWSxTQUFDLE9BQU87O0lBR3ZCLHlCQUFDO0NBQUEsQUFsREQsSUFrREM7U0E5Q1ksa0JBQWtCOzs7Ozs7SUFDN0IsMENBQXNDOzs7OztJQUN0Qyx3Q0FBNEI7Ozs7O0lBQzVCLHNDQUE0Qzs7SUFFNUMscUNBQXFFOztJQXNCbkUsd0NBQTZCOztJQUM3Qix1Q0FBMkI7Ozs7O0lBQzNCLHVDQUE0Qjs7Ozs7SUFDNUIsMENBQWtDOzs7OztJQUNsQywwQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29sb3IvY29sb3Iuc2VydmljZSc7XG5pbXBvcnQgeyBDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbGFzcy5zZXJ2aWNlJztcblxuLy8gQFRPRE8gb25Gb2N1cyBDb2xvclxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWtJbnB1dFRleHRdJyxcbiAgcHJvdmlkZXJzOiBbQ29sb3JTZXJ2aWNlLCBDbGFzc1NlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIElucHV0VGV4dERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgZGVmYXVsdENsYXNzID0gJ2Zvcm0tY29udHJvbCc7XG4gIHByaXZhdGUgaXNTZXRDbGFzczogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfb25LZXlVcCA9IG5ldyBTdWJqZWN0PE5nQ29udHJvbD4oKTtcblxuICBwdWJsaWMgb25LZXl1cDogT2JzZXJ2YWJsZTxOZ0NvbnRyb2w+ID0gdGhpcy5fb25LZXlVcC5hc09ic2VydmFibGUoKTtcblxuICBASW5wdXQoKSBzZXQgYm9yZGVyQ29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcihjb2xvciwgdHJ1ZSwgJ2JvcmRlci1jb2xvcicsIG51bGwpO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjbGFzcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuaXNTZXRDbGFzcyA9IHRydWU7XG4gICAgdGhpcy5jbGFzc1NlcnZpY2UuYXBwbHlDbGFzc2VzKGNsYXNzTmFtZSk7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRGb250Q29sb3IoY29sb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtICBlbGVtZW50UmVmICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHJlbmRlcmVyMiAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgbmdDb250cm9sICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICBjb2xvclNlcnZpY2UgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIGNsYXNzU2VydmljZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgcmVuZGVyZXIyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbCxcbiAgICBwcml2YXRlIGNvbG9yU2VydmljZTogQ29sb3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xhc3NTZXJ2aWNlOiBDbGFzc1NlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25Jbml0XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTZXRDbGFzcykge1xuICAgICAgdGhpcy5jbGFzc1NlcnZpY2UuYXBwbHlDbGFzc2VzKHRoaXMuZGVmYXVsdENsYXNzKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcpIGtleVVwTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5fb25LZXlVcC5uZXh0KHRoaXMubmdDb250cm9sKTtcbiAgfVxufVxuIl19