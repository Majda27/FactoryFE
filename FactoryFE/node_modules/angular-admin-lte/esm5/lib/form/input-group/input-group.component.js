/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input } from '@angular/core';
import { removeSubscriptions } from '../../helpers';
import { InputGroupAddonLeftDirective, InputGroupAddonRightDirective, InputGroupContentDirective, InputGroupLabelDirective } from './input-group.directive';
import { InputTextDirective } from '../input-text/input-text.directive';
/*
 *
 */
var InputGroupComponent = /** @class */ (function () {
    function InputGroupComponent() {
        this.subscriptions = [];
        this.inputColor = 'default';
        this.inputErrorColor = 'danger';
        this.inputValidColor = 'success';
        this.wrapperClasses = 'form-group';
    }
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.inputTextDirective.onKeyup.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.invalid) {
                _this.currentColor = _this.inputErrorColor;
                _this.currentFontColor = _this.inputErrorFontColor;
            }
            else if (!value.invalid) {
                _this.currentColor = _this.inputValidColor;
                _this.currentFontColor = _this.inputValidFontColor;
            }
            else {
                _this.currentColor = _this.inputColor;
                _this.currentFontColor = _this.inputFontColor;
            }
        })));
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        removeSubscriptions(this.subscriptions);
    };
    InputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-input-group',
                    template: "<div [ngClass]=\"wrapperClasses\" [mkColor]=\"currentColor || inputColor\" mkColorPrefix=\"has\">\n  <label *ngIf=\"label || inputGroupLabelDirective\">\n    {{label}}\n    <ng-content select=\"mk-input-group-label\"></ng-content>\n  </label>\n  <div *ngIf=\"addonLeft || inputGroupAddonLeftDirective || addonRight || inputGroupAddonRightDirective; else noAddon\" class=\"input-group\">\n    <span *ngIf=\"addonLeft || inputGroupAddonLeftDirective\" class=\"input-group-addon\">\n      {{addonLeft}}\n      <ng-content select=\"mk-input-group-addon-left\"></ng-content>\n    </span>\n    <ng-content select=\"mk-input-group-content\"></ng-content>\n    <span *ngIf=\"addonRight || inputGroupAddonRightDirective\" class=\"input-group-addon\">\n      {{addonRight}}\n      <ng-content select=\"mk-input-group-addon-right\"></ng-content>\n    </span>\n  </div>\n  <ng-template #noAddon><ng-content select=\"mk-input-group-content\"></ng-content></ng-template>\n</div>\n"
                }] }
    ];
    InputGroupComponent.propDecorators = {
        addonLeft: [{ type: Input }],
        addonRight: [{ type: Input }],
        inputColor: [{ type: Input }],
        inputFontColor: [{ type: Input }],
        inputErrorColor: [{ type: Input }],
        inputErrorFontColor: [{ type: Input }],
        inputValidColor: [{ type: Input }],
        inputValidFontColor: [{ type: Input }],
        label: [{ type: Input }],
        wrapperClasses: [{ type: Input }],
        inputGroupLabelDirective: [{ type: ContentChild, args: [InputGroupLabelDirective,] }],
        inputGroupAddonLeftDirective: [{ type: ContentChild, args: [InputGroupAddonLeftDirective,] }],
        inputGroupAddonRightDirective: [{ type: ContentChild, args: [InputGroupAddonRightDirective,] }],
        inputGroupContentDirective: [{ type: ContentChild, args: [InputGroupContentDirective,] }],
        inputTextDirective: [{ type: ContentChild, args: [InputTextDirective,] }]
    };
    return InputGroupComponent;
}());
export { InputGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.subscriptions;
    /** @type {?} */
    InputGroupComponent.prototype.currentColor;
    /** @type {?} */
    InputGroupComponent.prototype.currentFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.addonLeft;
    /** @type {?} */
    InputGroupComponent.prototype.addonRight;
    /** @type {?} */
    InputGroupComponent.prototype.inputColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputErrorFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidColor;
    /** @type {?} */
    InputGroupComponent.prototype.inputValidFontColor;
    /** @type {?} */
    InputGroupComponent.prototype.label;
    /** @type {?} */
    InputGroupComponent.prototype.wrapperClasses;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupLabelDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonLeftDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupAddonRightDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroupContentDirective;
    /** @type {?} */
    InputGroupComponent.prototype.inputTextDirective;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hZG1pbi1sdGUvIiwic291cmNlcyI6WyJsaWIvZm9ybS9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsNkJBQTZCLEVBQzdCLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDekIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQVF4RTtJQUFBO1FBS1Usa0JBQWEsR0FBd0IsRUFBRSxDQUFDO1FBT3ZDLGVBQVUsR0FBRyxTQUFTLENBQUM7UUFFdkIsb0JBQWUsR0FBRyxRQUFRLENBQUM7UUFFM0Isb0JBQWUsR0FBRyxTQUFTLENBQUM7UUFHNUIsbUJBQWMsR0FBRyxZQUFZLENBQUM7SUEwQnpDLENBQUM7Ozs7SUFsQkMsZ0RBQWtCOzs7SUFBbEI7UUFBQSxpQkFhQztRQVpDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsS0FBZ0I7WUFDakYsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUNqQixLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUM7Z0JBQ3pDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFJLENBQUMsbUJBQW1CLENBQUM7YUFDbEQ7aUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ3pCLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQztnQkFDekMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQzthQUNsRDtpQkFBTTtnQkFDTCxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ3BDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDO2FBQzdDO1FBQ0gsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCx5Q0FBVzs7O0lBQVg7UUFDRSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixrOUJBQTJDO2lCQUM1Qzs7OzRCQU9FLEtBQUs7NkJBQ0wsS0FBSzs2QkFDTCxLQUFLO2lDQUNMLEtBQUs7a0NBQ0wsS0FBSztzQ0FDTCxLQUFLO2tDQUNMLEtBQUs7c0NBQ0wsS0FBSzt3QkFDTCxLQUFLO2lDQUNMLEtBQUs7MkNBRUwsWUFBWSxTQUFDLHdCQUF3QjsrQ0FDckMsWUFBWSxTQUFDLDRCQUE0QjtnREFDekMsWUFBWSxTQUFDLDZCQUE2Qjs2Q0FDMUMsWUFBWSxTQUFDLDBCQUEwQjtxQ0FDdkMsWUFBWSxTQUFDLGtCQUFrQjs7SUFvQmxDLDBCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0F6Q1ksbUJBQW1COzs7Ozs7SUFDOUIsNENBQWdEOztJQUVoRCwyQ0FBNEI7O0lBQzVCLCtDQUFnQzs7SUFFaEMsd0NBQTJCOztJQUMzQix5Q0FBNEI7O0lBQzVCLHlDQUFnQzs7SUFDaEMsNkNBQWdDOztJQUNoQyw4Q0FBb0M7O0lBQ3BDLGtEQUFxQzs7SUFDckMsOENBQXFDOztJQUNyQyxrREFBcUM7O0lBQ3JDLG9DQUF1Qjs7SUFDdkIsNkNBQXVDOztJQUV2Qyx1REFBa0c7O0lBQ2xHLDJEQUE4Rzs7SUFDOUcsNERBQWlIOztJQUNqSCx5REFBd0c7O0lBQ3hHLGlEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHJlbW92ZVN1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcblxuaW1wb3J0IHtcbiAgSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZSxcbiAgSW5wdXRHcm91cEFkZG9uUmlnaHREaXJlY3RpdmUsXG4gIElucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlLFxuICBJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmVcbn0gZnJvbSAnLi9pbnB1dC1ncm91cC5kaXJlY3RpdmUnO1xuXG5pbXBvcnQgeyBJbnB1dFRleHREaXJlY3RpdmUgfSBmcm9tICcuLi9pbnB1dC10ZXh0L2lucHV0LXRleHQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5cbi8qXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtay1pbnB1dC1ncm91cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1ncm91cC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogQXJyYXk8U3Vic2NyaXB0aW9uPiA9IFtdO1xuXG4gIHB1YmxpYyBjdXJyZW50Q29sb3I6IHN0cmluZztcbiAgcHVibGljIGN1cnJlbnRGb250Q29sb3I6IHN0cmluZztcblxuICBASW5wdXQoKSBhZGRvbkxlZnQ6IHN0cmluZztcbiAgQElucHV0KCkgYWRkb25SaWdodDogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dENvbG9yID0gJ2RlZmF1bHQnO1xuICBASW5wdXQoKSBpbnB1dEZvbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dEVycm9yQ29sb3IgPSAnZGFuZ2VyJztcbiAgQElucHV0KCkgaW5wdXRFcnJvckZvbnRDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBpbnB1dFZhbGlkQ29sb3IgPSAnc3VjY2Vzcyc7XG4gIEBJbnB1dCgpIGlucHV0VmFsaWRGb250Q29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgd3JhcHBlckNsYXNzZXMgPSAnZm9ybS1ncm91cCc7XG5cbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmUpIHB1YmxpYyBpbnB1dEdyb3VwTGFiZWxEaXJlY3RpdmU6IElucHV0R3JvdXBMYWJlbERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQWRkb25MZWZ0RGlyZWN0aXZlKSBwdWJsaWMgaW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZTogSW5wdXRHcm91cEFkZG9uTGVmdERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBBZGRvblJpZ2h0RGlyZWN0aXZlOiBJbnB1dEdyb3VwQWRkb25SaWdodERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZSkgcHVibGljIGlucHV0R3JvdXBDb250ZW50RGlyZWN0aXZlOiBJbnB1dEdyb3VwQ29udGVudERpcmVjdGl2ZTtcbiAgQENvbnRlbnRDaGlsZChJbnB1dFRleHREaXJlY3RpdmUpIHB1YmxpYyBpbnB1dFRleHREaXJlY3RpdmU6IElucHV0VGV4dERpcmVjdGl2ZTtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5pbnB1dFRleHREaXJlY3RpdmUub25LZXl1cC5zdWJzY3JpYmUoKHZhbHVlOiBOZ0NvbnRyb2wpID0+IHtcbiAgICAgIGlmICh2YWx1ZS5pbnZhbGlkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbG9yID0gdGhpcy5pbnB1dEVycm9yQ29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRFcnJvckZvbnRDb2xvcjtcbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlLmludmFsaWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSB0aGlzLmlucHV0VmFsaWRDb2xvcjtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udENvbG9yID0gdGhpcy5pbnB1dFZhbGlkRm9udENvbG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSB0aGlzLmlucHV0Q29sb3I7XG4gICAgICAgIHRoaXMuY3VycmVudEZvbnRDb2xvciA9IHRoaXMuaW5wdXRGb250Q29sb3I7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlU3Vic2NyaXB0aW9ucyh0aGlzLnN1YnNjcmlwdGlvbnMpO1xuICB9XG59XG4iXX0=