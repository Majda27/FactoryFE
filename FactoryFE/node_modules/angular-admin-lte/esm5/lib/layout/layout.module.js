/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ContentModule } from './content/content.module';
import { FooterModule } from './footer/footer.module';
import { HeaderModule } from './header/header.module';
import { SidebarLeftModule } from './sidebar-left/sidebar-left.module';
import { SidebarRightModule } from './sidebar-right/sidebar-right.module';
import { WrapperModule } from './wrapper/wrapper.module';
import { LayoutService } from './layout.service';
import { layoutProvider } from './layout.provider';
import { RoutingService } from '../services/routing.service';
import { WrapperService } from './wrapper/wrapper.service';
import { SidebarRightService } from './sidebar-right/sidebar-right.service';
import { HeaderService } from './header/header.service';
import { FooterService } from './footer/footer.service';
var LayoutModule = /** @class */ (function () {
    /**
     * @method constructor
     * @param parentModule [description]
     */
    function LayoutModule(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    /**
     * [forRoot description]
     * @method forRoot
     * @param  layoutConfig [description]
     * @return [description]
     */
    /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig [description]
     * @return {?} [description]
     */
    LayoutModule.forRoot = /**
     * [forRoot description]
     * \@method forRoot
     * @param {?} layoutConfig [description]
     * @return {?} [description]
     */
    function (layoutConfig) {
        return {
            ngModule: LayoutModule,
            providers: tslib_1.__spread(layoutProvider(layoutConfig), [LayoutService])
        };
    };
    LayoutModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule],
                    exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
                    providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
                },] }
    ];
    /** @nocollapse */
    LayoutModule.ctorParameters = function () { return [
        { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return LayoutModule;
}());
export { LayoutModule };
export { LayoutService } from './layout.service';
export { LayoutStore } from './layout.store';
export {} from './layout.state';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL2xheW91dC9sYXlvdXQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV4RDtJQU9FOzs7T0FHRztJQUNILHNCQUFvQyxZQUEwQjtRQUM1RCxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7U0FDckY7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDSSxvQkFBTzs7Ozs7O0lBQWQsVUFBZSxZQUF5QjtRQUN0QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxtQkFBTSxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUUsYUFBYSxFQUFDO1NBQzVELENBQUM7SUFDSixDQUFDOztnQkE1QkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7b0JBQ3JDLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztvQkFDMUcsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDO2lCQUMvRjs7OztnQkFPbUQsWUFBWSx1QkFBakQsUUFBUSxZQUFJLFFBQVE7O0lBa0JuQyxtQkFBQztDQUFBLEFBN0JELElBNkJDO1NBeEJZLFlBQVk7QUEwQnpCLDhCQUFjLGtCQUFrQixDQUFDO0FBQ2pDLDRCQUFjLGdCQUFnQixDQUFDO0FBQy9CLGVBQWMsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgQ29udGVudE1vZHVsZSB9IGZyb20gJy4vY29udGVudC9jb250ZW50Lm1vZHVsZSc7XG5pbXBvcnQgeyBGb290ZXJNb2R1bGUgfSBmcm9tICcuL2Zvb3Rlci9mb290ZXIubW9kdWxlJztcbmltcG9ydCB7IEhlYWRlck1vZHVsZSB9IGZyb20gJy4vaGVhZGVyL2hlYWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgU2lkZWJhckxlZnRNb2R1bGUgfSBmcm9tICcuL3NpZGViYXItbGVmdC9zaWRlYmFyLWxlZnQubW9kdWxlJztcbmltcG9ydCB7IFNpZGViYXJSaWdodE1vZHVsZSB9IGZyb20gJy4vc2lkZWJhci1yaWdodC9zaWRlYmFyLXJpZ2h0Lm1vZHVsZSc7XG5pbXBvcnQgeyBXcmFwcGVyTW9kdWxlIH0gZnJvbSAnLi93cmFwcGVyL3dyYXBwZXIubW9kdWxlJztcblxuaW1wb3J0IHsgTGF5b3V0U2VydmljZSB9IGZyb20gJy4vbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0U3RhdGUgfSBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG5pbXBvcnQgeyBsYXlvdXRQcm92aWRlciB9IGZyb20gJy4vbGF5b3V0LnByb3ZpZGVyJztcblxuaW1wb3J0IHsgUm91dGluZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9yb3V0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgV3JhcHBlclNlcnZpY2UgfSBmcm9tICcuL3dyYXBwZXIvd3JhcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNpZGViYXJSaWdodFNlcnZpY2UgfSBmcm9tICcuL3NpZGViYXItcmlnaHQvc2lkZWJhci1yaWdodC5zZXJ2aWNlJztcbmltcG9ydCB7IEhlYWRlclNlcnZpY2UgfSBmcm9tICcuL2hlYWRlci9oZWFkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGb290ZXJTZXJ2aWNlIH0gZnJvbSAnLi9mb290ZXIvZm9vdGVyLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSb3V0ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbQ29udGVudE1vZHVsZSwgRm9vdGVyTW9kdWxlLCBIZWFkZXJNb2R1bGUsIFNpZGViYXJMZWZ0TW9kdWxlLCBTaWRlYmFyUmlnaHRNb2R1bGUsIFdyYXBwZXJNb2R1bGVdLFxuICBwcm92aWRlcnM6IFtSb3V0aW5nU2VydmljZSwgV3JhcHBlclNlcnZpY2UsIFNpZGViYXJSaWdodFNlcnZpY2UsIEhlYWRlclNlcnZpY2UsIEZvb3RlclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIExheW91dE1vZHVsZSB7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmVudE1vZHVsZSBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IExheW91dE1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTGF5b3V0TW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5IScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbZm9yUm9vdCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBmb3JSb290XG4gICAqIEBwYXJhbSAgbGF5b3V0Q29uZmlnIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChsYXlvdXRDb25maWc6IExheW91dFN0YXRlKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMYXlvdXRNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFsuLi5sYXlvdXRQcm92aWRlcihsYXlvdXRDb25maWcpLCBMYXlvdXRTZXJ2aWNlXVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQuc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdG9yZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG4iXX0=