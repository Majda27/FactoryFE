/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Renderer2, ElementRef } from '@angular/core';
/*
 *
 */
var ClassService = /** @class */ (function () {
    function ClassService(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    /**
     * @param {?} cssClasses
     * @return {?}
     */
    ClassService.prototype.applyClasses = /**
     * @param {?} cssClasses
     * @return {?}
     */
    function (cssClasses) {
        var _this = this;
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        /** @type {?} */
        var classesToRemove = this.currentClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return cssClasses.indexOf(x) === -1; }));
        classesToRemove.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.removeClass(_this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Add only classes that are not in currentClasses
        /** @type {?} */
        var classesToAdd = cssClasses.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.currentClasses.indexOf(x) === -1; }));
        classesToAdd.forEach((/**
         * @param {?} cssClasse
         * @return {?}
         */
        function (cssClasse) {
            if (cssClasse) {
                _this.renderer2.addClass(_this.elementRef.nativeElement, cssClasse);
            }
        }));
        // Update current classes for futur updates
        this.currentClasses = tslib_1.__spread(cssClasses);
    };
    ClassService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ClassService.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return ClassService;
}());
export { ClassService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.currentClasses;
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ClassService.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYWRtaW4tbHRlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFLbEU7SUFJRSxzQkFDVSxVQUFzQixFQUN0QixTQUFvQjtRQURwQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFKdEIsbUJBQWMsR0FBa0IsRUFBRSxDQUFDO0lBS3hDLENBQUM7Ozs7O0lBR0csbUNBQVk7Ozs7SUFBbkIsVUFBb0IsVUFBa0M7UUFBdEQsaUJBdUJDO1FBdEJDLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO1lBQ2xDLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDOzs7WUFHSyxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUE1QixDQUE0QixFQUFDO1FBQ3JGLGVBQWUsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxTQUFTO1lBQy9CLElBQUksU0FBUyxFQUFFO2dCQUNiLEtBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3RFO1FBQ0gsQ0FBQyxFQUFDLENBQUM7OztZQUdHLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQXJDLENBQXFDLEVBQUM7UUFDbEYsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLFNBQVM7WUFDNUIsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDbkU7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUVILDJDQUEyQztRQUMzQyxJQUFJLENBQUMsY0FBYyxvQkFBUSxVQUFVLENBQUMsQ0FBQztJQUN6QyxDQUFDOztnQkFqQ0YsVUFBVTs7OztnQkFMcUIsVUFBVTtnQkFBckIsU0FBUzs7SUF1QzlCLG1CQUFDO0NBQUEsQUFsQ0QsSUFrQ0M7U0FqQ1ksWUFBWTs7Ozs7O0lBQ3ZCLHNDQUEyQzs7Ozs7SUFHekMsa0NBQThCOzs7OztJQUM5QixpQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLypcbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDbGFzc1NlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnRDbGFzc2VzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcbiAgKSB7fVxuXG5cbiAgcHVibGljIGFwcGx5Q2xhc3Nlcyhjc3NDbGFzc2VzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBjc3NDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgb25seSBjbGFzc2VzIHRoYXQgYXJlIG5vdCBpbiBjc3NDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gdGhpcy5jdXJyZW50Q2xhc3Nlcy5maWx0ZXIoeCA9PiBjc3NDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9SZW1vdmUuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBvbmx5IGNsYXNzZXMgdGhhdCBhcmUgbm90IGluIGN1cnJlbnRDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvQWRkID0gY3NzQ2xhc3Nlcy5maWx0ZXIoeCA9PiB0aGlzLmN1cnJlbnRDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9BZGQuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBjdXJyZW50IGNsYXNzZXMgZm9yIGZ1dHVyIHVwZGF0ZXNcbiAgICB0aGlzLmN1cnJlbnRDbGFzc2VzID0gWy4uLiBjc3NDbGFzc2VzXTtcbiAgfVxufVxuIl19