/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { removeListeners } from '../helpers';
/*
 *
 */
var AlertComponent = /** @class */ (function () {
    /**
     * @method constructor
     * @param  changeDetectorRef [description]
     * @param  ngZone            [description]
     * @param  renderer2         [description]
     * @param  viewContainerRef  [description]
     */
    function AlertComponent(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.type = 'alert';
        this.listeners = [];
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.onCollapseStart = new EventEmitter();
        this.onCollapseDone = new EventEmitter();
    }
    Object.defineProperty(AlertComponent.prototype, "callout", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.type = value ? 'callout' : 'alert';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlertComponent.prototype, "_isDismissible", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isDismissible = value;
            if (value) {
                this.dismissibleClass = this.type + "-dismissible";
            }
            else {
                this.dismissibleClass = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @method ngOnInit
     */
    /**
     * \@method ngOnInit
     * @return {?}
     */
    AlertComponent.prototype.ngAfterViewInit = /**
     * \@method ngOnInit
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.dismissOnTimeout) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (!((/** @type {?} */ (_this.changeDetectorRef))).destroyed) {
                        _this.remove = true;
                        _this.changeDetectorRef.detectChanges();
                    }
                }), _this.dismissOnTimeout);
            }
            if (_this.removeButtonElement) {
                _this.listeners.push(_this.renderer2.listen(_this.removeButtonElement.nativeElement, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.remove = true;
                    _this.changeDetectorRef.detectChanges();
                })));
            }
        }));
    };
    /**
     * @method ngOnDesroy
     */
    /**
     * \@method ngOnDesroy
     * @return {?}
     */
    AlertComponent.prototype.ngOnDestroy = /**
     * \@method ngOnDesroy
     * @return {?}
     */
    function () {
        removeListeners(this.listeners);
    };
    /**
     * [collapseStart description]
     * @method collapseStart
     * @param event [description]
     */
    /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    AlertComponent.prototype.collapseStart = /**
     * [collapseStart description]
     * \@method collapseStart
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        this.onCollapseStart.emit(event);
    };
    /**
     * [collapseDone description]
     * @method collapseDone
     * @param event [description]
     */
    /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    AlertComponent.prototype.collapseDone = /**
     * [collapseDone description]
     * \@method collapseDone
     * @param {?} event [description]
     * @return {?}
     */
    function (event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.onCollapseDone.emit(event);
    };
    AlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mk-alert',
                    template: "<div *ngIf=\"!removed\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.start)=\"collapseStart($event)\" (mkCollapseAnimation.done)=\"collapseDone($event)\">\n  <div [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\" [mkColorPrefix]=\"type\" [mkFontColor]=\"color\" [ngClass]=\"[styleClass, dismissibleClass, type]\">\n    <button *ngIf=\"isDismissible\" type=\"button\" class=\"close\" #removeButtonElement>&times;</button>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.callout .close{color:#000;opacity:.2}.callout .icon{margin-right:10px}"]
                }] }
    ];
    /** @nocollapse */
    AlertComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    AlertComponent.propDecorators = {
        backgroundColor: [{ type: Input }],
        callout: [{ type: Input }],
        color: [{ type: Input }],
        dismissOnTimeout: [{ type: Input }],
        _isDismissible: [{ type: Input, args: ['isDismissible',] }],
        styleClass: [{ type: Input }],
        onCollapseStart: [{ type: Output }],
        onCollapseDone: [{ type: Output }],
        removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }],
        containerElementRef: [{ type: ViewChild, args: ['containerElementRef', { read: ViewContainerRef },] }]
    };
    return AlertComponent;
}());
export { AlertComponent };
if (false) {
    /** @type {?} */
    AlertComponent.prototype.dismissibleClass;
    /** @type {?} */
    AlertComponent.prototype.isDismissible;
    /** @type {?} */
    AlertComponent.prototype.remove;
    /** @type {?} */
    AlertComponent.prototype.removed;
    /** @type {?} */
    AlertComponent.prototype.type;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.listeners;
    /** @type {?} */
    AlertComponent.prototype.backgroundColor;
    /** @type {?} */
    AlertComponent.prototype.color;
    /** @type {?} */
    AlertComponent.prototype.dismissOnTimeout;
    /** @type {?} */
    AlertComponent.prototype.styleClass;
    /** @type {?} */
    AlertComponent.prototype.onCollapseStart;
    /** @type {?} */
    AlertComponent.prototype.onCollapseDone;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.removeButtonElement;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.containerElementRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,